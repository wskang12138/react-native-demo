{"dependencies":[{"name":"./_memoizeCapped","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":20,"index":20},"end":{"line":1,"column":47,"index":47}}],"key":"jsV312SuvvLOrgyOO5HIPr30Z/I="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /** Used to match property names within property paths. */\n  var rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Converts `string` to a property path array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the property path array.\n   */\n  var stringToPath = _$$_REQUIRE(_dependencyMap[0], \"./_memoizeCapped\")(function (string) {\n    var result = [];\n    if (string.charCodeAt(0) === 46 /* . */) {\n      result.push('');\n    }\n    string.replace(rePropName, function (match, number, quote, subString) {\n      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);\n    });\n    return result;\n  });\n  module.exports = stringToPath;\n});","lineCount":26,"map":[[2,2,3,0],[3,2,4,0],[3,6,4,4,"rePropName"],[3,16,4,14],[3,19,4,17],[3,117,4,115],[5,2,6,0],[6,2,7,0],[6,6,7,4,"reEscapeChar"],[6,18,7,16],[6,21,7,19],[6,31,7,29],[8,2,9,0],[9,0,10,0],[10,0,11,0],[11,0,12,0],[12,0,13,0],[13,0,14,0],[14,0,15,0],[15,2,16,0],[15,6,16,4,"stringToPath"],[15,18,16,16],[15,21,16,19,"_$$_REQUIRE"],[15,32,16,19],[15,33,16,19,"_dependencyMap"],[15,47,16,19],[15,72,16,33],[15,82,16,42,"string"],[15,88,16,48],[15,90,16,50],[16,4,17,2],[16,8,17,6,"result"],[16,14,17,12],[16,17,17,15],[16,19,17,17],[17,4,18,2],[17,8,18,6,"string"],[17,14,18,12],[17,15,18,13,"charCodeAt"],[17,25,18,23],[17,26,18,24],[17,27,18,25],[17,28,18,26],[17,33,18,31],[17,35,18,33],[17,36,18,34],[17,45,18,43],[18,6,19,4,"result"],[18,12,19,10],[18,13,19,11,"push"],[18,17,19,15],[18,18,19,16],[18,20,19,18],[18,21,19,19],[19,4,20,2],[20,4,21,2,"string"],[20,10,21,8],[20,11,21,9,"replace"],[20,18,21,16],[20,19,21,17,"rePropName"],[20,29,21,27],[20,31,21,29],[20,41,21,38,"match"],[20,46,21,43],[20,48,21,45,"number"],[20,54,21,51],[20,56,21,53,"quote"],[20,61,21,58],[20,63,21,60,"subString"],[20,72,21,69],[20,74,21,71],[21,6,22,4,"result"],[21,12,22,10],[21,13,22,11,"push"],[21,17,22,15],[21,18,22,16,"quote"],[21,23,22,21],[21,26,22,24,"subString"],[21,35,22,33],[21,36,22,34,"replace"],[21,43,22,41],[21,44,22,42,"reEscapeChar"],[21,56,22,54],[21,58,22,56],[21,62,22,60],[21,63,22,61],[21,66,22,65,"number"],[21,72,22,71],[21,76,22,75,"match"],[21,81,22,81],[21,82,22,82],[22,4,23,2],[22,5,23,3],[22,6,23,4],[23,4,24,2],[23,11,24,9,"result"],[23,17,24,15],[24,2,25,0],[24,3,25,1],[24,4,25,2],[25,2,27,0,"module"],[25,8,27,6],[25,9,27,7,"exports"],[25,16,27,14],[25,19,27,17,"stringToPath"],[25,31,27,29],[26,0,27,30],[26,3]],"functionMap":{"names":["<global>","memoizeCapped$argument_0","string.replace$argument_1"],"mappings":"AAA;iCCe;6BCK;GDE;CDE"}},"type":"js/module"}]}