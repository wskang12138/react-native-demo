{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n  /**\n   * The base implementation of `_.range` and `_.rangeRight` which doesn't\n   * coerce arguments.\n   *\n   * @private\n   * @param {number} start The start of the range.\n   * @param {number} end The end of the range.\n   * @param {number} step The value to increment or decrement by.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Array} Returns the range of numbers.\n   */\n  function baseRange(start, end, step, fromRight) {\n    var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n    while (length--) {\n      result[fromRight ? length : ++index] = start;\n      start += step;\n    }\n    return result;\n  }\n  module.exports = baseRange;\n});","lineCount":28,"map":[[2,2,1,0],[3,2,2,0],[3,6,2,4,"nativeCeil"],[3,16,2,14],[3,19,2,17,"Math"],[3,23,2,21],[3,24,2,22,"ceil"],[3,28,2,26],[4,4,3,4,"nativeMax"],[4,13,3,13],[4,16,3,16,"Math"],[4,20,3,20],[4,21,3,21,"max"],[4,24,3,24],[6,2,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,2,16,0],[17,11,16,9,"baseRange"],[17,20,16,18,"baseRange"],[17,21,16,19,"start"],[17,26,16,24],[17,28,16,26,"end"],[17,31,16,29],[17,33,16,31,"step"],[17,37,16,35],[17,39,16,37,"fromRight"],[17,48,16,46],[17,50,16,48],[18,4,17,2],[18,8,17,6,"index"],[18,13,17,11],[18,16,17,14],[18,17,17,15],[18,18,17,16],[19,6,18,6,"length"],[19,12,18,12],[19,15,18,15,"nativeMax"],[19,24,18,24],[19,25,18,25,"nativeCeil"],[19,35,18,35],[19,36,18,36],[19,37,18,37,"end"],[19,40,18,40],[19,43,18,43,"start"],[19,48,18,48],[19,53,18,53,"step"],[19,57,18,57],[19,61,18,61],[19,62,18,62],[19,63,18,63],[19,64,18,64],[19,66,18,66],[19,67,18,67],[19,68,18,68],[20,6,19,6,"result"],[20,12,19,12],[20,15,19,15,"Array"],[20,20,19,20],[20,21,19,21,"length"],[20,27,19,27],[20,28,19,28],[21,4,21,2],[21,11,21,9,"length"],[21,17,21,15],[21,19,21,17],[21,21,21,19],[22,6,22,4,"result"],[22,12,22,10],[22,13,22,11,"fromRight"],[22,22,22,20],[22,25,22,23,"length"],[22,31,22,29],[22,34,22,32],[22,36,22,34,"index"],[22,41,22,39],[22,42,22,40],[22,45,22,43,"start"],[22,50,22,48],[23,6,23,4,"start"],[23,11,23,9],[23,15,23,13,"step"],[23,19,23,17],[24,4,24,2],[25,4,25,2],[25,11,25,9,"result"],[25,17,25,15],[26,2,26,0],[27,2,28,0,"module"],[27,8,28,6],[27,9,28,7,"exports"],[27,16,28,14],[27,19,28,17,"baseRange"],[27,28,28,26],[28,0,28,27],[28,3]],"functionMap":{"names":["<global>","baseRange"],"mappings":"AAA;ACe;CDU"}},"type":"js/module"}]}