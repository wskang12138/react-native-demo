{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":50,"column":1,"index":1894}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":50,"column":1,"index":1894}}],"key":"XnmB3YjhLQUu4Gtg+kalDAx6bCo="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.containsDates = containsDates;\n  exports.containsNumbers = containsNumbers;\n  exports.containsOnlyStrings = containsOnlyStrings;\n  exports.containsStrings = containsStrings;\n  exports.difference = difference;\n  exports.getMaxValue = getMaxValue;\n  exports.getMinValue = getMinValue;\n  exports.isArrayOfArrays = isArrayOfArrays;\n  exports.removeUndefined = removeUndefined;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  function isNonEmptyArray(collection) {\n    return Array.isArray(collection) && collection.length > 0;\n  }\n  function containsStrings(collection) {\n    return Array.isArray(collection) && collection.some(function (value) {\n      return typeof value === \"string\";\n    });\n  }\n  function containsDates(collection) {\n    return Array.isArray(collection) && collection.some(function (value) {\n      return value instanceof Date;\n    });\n  }\n  function containsNumbers(collection) {\n    return Array.isArray(collection) && collection.some(function (value) {\n      return typeof value === \"number\";\n    });\n  }\n  function containsOnlyStrings(collection) {\n    return isNonEmptyArray(collection) && collection.every(function (value) {\n      return typeof value === \"string\";\n    });\n  }\n\n  /**\n   * Creates an array of array values not included in the other given arrays\n   * @param a The array to inspect\n   * @param b The values to exclude\n   * @returns The new array of filtered values\n   */\n  function difference(a, b) {\n    if (a && b) {\n      return a.filter(function (value) {\n        return !b.includes(value);\n      });\n    }\n    return [];\n  }\n  function isArrayOfArrays(collection) {\n    return isNonEmptyArray(collection) && collection.every(Array.isArray);\n  }\n  function removeUndefined(arr) {\n    return arr.filter(function (el) {\n      return el !== undefined;\n    });\n  }\n  function getMaxValue(arr) {\n    for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      values[_key - 1] = arguments[_key];\n    }\n    var array = arr.concat(values);\n    return containsDates(array) ? new Date(Math.max.apply(Math, (0, _toConsumableArray2.default)(array))) // Dates will be coerced to numbers\n    : Math.max.apply(Math, (0, _toConsumableArray2.default)(array));\n  }\n  function getMinValue(arr) {\n    for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      values[_key2 - 1] = arguments[_key2];\n    }\n    var array = arr.concat(values);\n    return containsDates(array) ? new Date(Math.min.apply(Math, (0, _toConsumableArray2.default)(array))) // Dates will be coerced to numbers\n    : Math.min.apply(Math, (0, _toConsumableArray2.default)(array));\n  }\n});","lineCount":78,"map":[[16,2,1,0],[16,11,1,9,"isNonEmptyArray"],[16,26,1,24,"isNonEmptyArray"],[16,27,1,25,"collection"],[16,37,1,35],[16,39,1,37],[17,4,2,2],[17,11,2,9,"Array"],[17,16,2,14],[17,17,2,15,"isArray"],[17,24,2,22],[17,25,2,23,"collection"],[17,35,2,33],[17,36,2,34],[17,40,2,38,"collection"],[17,50,2,48],[17,51,2,49,"length"],[17,57,2,55],[17,60,2,58],[17,61,2,59],[18,2,3,0],[19,2,4,7],[19,11,4,16,"containsStrings"],[19,26,4,31,"containsStrings"],[19,27,4,32,"collection"],[19,37,4,42],[19,39,4,44],[20,4,5,2],[20,11,5,9,"Array"],[20,16,5,14],[20,17,5,15,"isArray"],[20,24,5,22],[20,25,5,23,"collection"],[20,35,5,33],[20,36,5,34],[20,40,5,38,"collection"],[20,50,5,48],[20,51,5,49,"some"],[20,55,5,53],[20,56,5,54],[20,66,5,54,"value"],[20,71,5,59],[21,6,5,59],[21,13,5,63],[21,20,5,70,"value"],[21,25,5,75],[21,30,5,80],[21,38,5,88],[22,4,5,88],[22,6,5,89],[23,2,6,0],[24,2,7,7],[24,11,7,16,"containsDates"],[24,24,7,29,"containsDates"],[24,25,7,30,"collection"],[24,35,7,40],[24,37,7,42],[25,4,8,2],[25,11,8,9,"Array"],[25,16,8,14],[25,17,8,15,"isArray"],[25,24,8,22],[25,25,8,23,"collection"],[25,35,8,33],[25,36,8,34],[25,40,8,38,"collection"],[25,50,8,48],[25,51,8,49,"some"],[25,55,8,53],[25,56,8,54],[25,66,8,54,"value"],[25,71,8,59],[26,6,8,59],[26,13,8,63,"value"],[26,18,8,68],[26,30,8,80,"Date"],[26,34,8,84],[27,4,8,84],[27,6,8,85],[28,2,9,0],[29,2,10,7],[29,11,10,16,"containsNumbers"],[29,26,10,31,"containsNumbers"],[29,27,10,32,"collection"],[29,37,10,42],[29,39,10,44],[30,4,11,2],[30,11,11,9,"Array"],[30,16,11,14],[30,17,11,15,"isArray"],[30,24,11,22],[30,25,11,23,"collection"],[30,35,11,33],[30,36,11,34],[30,40,11,38,"collection"],[30,50,11,48],[30,51,11,49,"some"],[30,55,11,53],[30,56,11,54],[30,66,11,54,"value"],[30,71,11,59],[31,6,11,59],[31,13,11,63],[31,20,11,70,"value"],[31,25,11,75],[31,30,11,80],[31,38,11,88],[32,4,11,88],[32,6,11,89],[33,2,12,0],[34,2,13,7],[34,11,13,16,"containsOnlyStrings"],[34,30,13,35,"containsOnlyStrings"],[34,31,13,36,"collection"],[34,41,13,46],[34,43,13,48],[35,4,14,2],[35,11,14,9,"isNonEmptyArray"],[35,26,14,24],[35,27,14,25,"collection"],[35,37,14,35],[35,38,14,36],[35,42,14,40,"collection"],[35,52,14,50],[35,53,14,51,"every"],[35,58,14,56],[35,59,14,57],[35,69,14,57,"value"],[35,74,14,62],[36,6,14,62],[36,13,14,66],[36,20,14,73,"value"],[36,25,14,78],[36,30,14,83],[36,38,14,91],[37,4,14,91],[37,6,14,92],[38,2,15,0],[40,2,17,0],[41,0,18,0],[42,0,19,0],[43,0,20,0],[44,0,21,0],[45,0,22,0],[46,2,23,7],[46,11,23,16,"difference"],[46,21,23,26,"difference"],[46,22,23,27,"a"],[46,23,23,28],[46,25,23,30,"b"],[46,26,23,31],[46,28,23,33],[47,4,24,2],[47,8,24,6,"a"],[47,9,24,7],[47,13,24,11,"b"],[47,14,24,12],[47,16,24,14],[48,6,25,4],[48,13,25,11,"a"],[48,14,25,12],[48,15,25,13,"filter"],[48,21,25,19],[48,22,25,20],[48,32,25,20,"value"],[48,37,25,25],[49,8,25,25],[49,15,25,29],[49,16,25,30,"b"],[49,17,25,31],[49,18,25,32,"includes"],[49,26,25,40],[49,27,25,41,"value"],[49,32,25,46],[49,33,25,47],[50,6,25,47],[50,8,25,48],[51,4,26,2],[52,4,27,2],[52,11,27,9],[52,13,27,11],[53,2,28,0],[54,2,29,7],[54,11,29,16,"isArrayOfArrays"],[54,26,29,31,"isArrayOfArrays"],[54,27,29,32,"collection"],[54,37,29,42],[54,39,29,44],[55,4,30,2],[55,11,30,9,"isNonEmptyArray"],[55,26,30,24],[55,27,30,25,"collection"],[55,37,30,35],[55,38,30,36],[55,42,30,40,"collection"],[55,52,30,50],[55,53,30,51,"every"],[55,58,30,56],[55,59,30,57,"Array"],[55,64,30,62],[55,65,30,63,"isArray"],[55,72,30,70],[55,73,30,71],[56,2,31,0],[57,2,32,7],[57,11,32,16,"removeUndefined"],[57,26,32,31,"removeUndefined"],[57,27,32,32,"arr"],[57,30,32,35],[57,32,32,37],[58,4,33,2],[58,11,33,9,"arr"],[58,14,33,12],[58,15,33,13,"filter"],[58,21,33,19],[58,22,33,20],[58,32,33,20,"el"],[58,34,33,22],[59,6,33,22],[59,13,33,26,"el"],[59,15,33,28],[59,20,33,33,"undefined"],[59,29,33,42],[60,4,33,42],[60,6,33,43],[61,2,34,0],[62,2,35,7],[62,11,35,16,"getMaxValue"],[62,22,35,27,"getMaxValue"],[62,23,35,28,"arr"],[62,26,35,31],[62,28,35,33],[63,4,36,2],[63,9,36,7],[63,13,36,11,"_len"],[63,17,36,15],[63,20,36,18,"arguments"],[63,29,36,27],[63,30,36,28,"length"],[63,36,36,34],[63,38,36,36,"values"],[63,44,36,42],[63,47,36,45],[63,51,36,49,"Array"],[63,56,36,54],[63,57,36,55,"_len"],[63,61,36,59],[63,64,36,62],[63,65,36,63],[63,68,36,66,"_len"],[63,72,36,70],[63,75,36,73],[63,76,36,74],[63,79,36,77],[63,80,36,78],[63,81,36,79],[63,83,36,81,"_key"],[63,87,36,85],[63,90,36,88],[63,91,36,89],[63,93,36,91,"_key"],[63,97,36,95],[63,100,36,98,"_len"],[63,104,36,102],[63,106,36,104,"_key"],[63,110,36,108],[63,112,36,110],[63,114,36,112],[64,6,37,4,"values"],[64,12,37,10],[64,13,37,11,"_key"],[64,17,37,15],[64,20,37,18],[64,21,37,19],[64,22,37,20],[64,25,37,23,"arguments"],[64,34,37,32],[64,35,37,33,"_key"],[64,39,37,37],[64,40,37,38],[65,4,38,2],[66,4,39,2],[66,8,39,8,"array"],[66,13,39,13],[66,16,39,16,"arr"],[66,19,39,19],[66,20,39,20,"concat"],[66,26,39,26],[66,27,39,27,"values"],[66,33,39,33],[66,34,39,34],[67,4,40,2],[67,11,40,9,"containsDates"],[67,24,40,22],[67,25,40,23,"array"],[67,30,40,28],[67,31,40,29],[67,34,40,32],[67,38,40,36,"Date"],[67,42,40,40],[67,43,40,41,"Math"],[67,47,40,45],[67,48,40,46,"max"],[67,51,40,49],[67,52,40,49,"apply"],[67,57,40,49],[67,58,40,41,"Math"],[67,62,40,45],[67,68,40,45,"_toConsumableArray2"],[67,87,40,45],[67,88,40,45,"default"],[67,95,40,45],[67,97,40,53,"array"],[67,102,40,58],[67,104,40,59],[67,105,40,60],[67,106,40,61],[68,4,40,61],[68,6,41,4,"Math"],[68,10,41,8],[68,11,41,9,"max"],[68,14,41,12],[68,15,41,12,"apply"],[68,20,41,12],[68,21,41,4,"Math"],[68,25,41,8],[68,31,41,8,"_toConsumableArray2"],[68,50,41,8],[68,51,41,8,"default"],[68,58,41,8],[68,60,41,16,"array"],[68,65,41,21],[68,67,41,22],[69,2,42,0],[70,2,43,7],[70,11,43,16,"getMinValue"],[70,22,43,27,"getMinValue"],[70,23,43,28,"arr"],[70,26,43,31],[70,28,43,33],[71,4,44,2],[71,9,44,7],[71,13,44,11,"_len2"],[71,18,44,16],[71,21,44,19,"arguments"],[71,30,44,28],[71,31,44,29,"length"],[71,37,44,35],[71,39,44,37,"values"],[71,45,44,43],[71,48,44,46],[71,52,44,50,"Array"],[71,57,44,55],[71,58,44,56,"_len2"],[71,63,44,61],[71,66,44,64],[71,67,44,65],[71,70,44,68,"_len2"],[71,75,44,73],[71,78,44,76],[71,79,44,77],[71,82,44,80],[71,83,44,81],[71,84,44,82],[71,86,44,84,"_key2"],[71,91,44,89],[71,94,44,92],[71,95,44,93],[71,97,44,95,"_key2"],[71,102,44,100],[71,105,44,103,"_len2"],[71,110,44,108],[71,112,44,110,"_key2"],[71,117,44,115],[71,119,44,117],[71,121,44,119],[72,6,45,4,"values"],[72,12,45,10],[72,13,45,11,"_key2"],[72,18,45,16],[72,21,45,19],[72,22,45,20],[72,23,45,21],[72,26,45,24,"arguments"],[72,35,45,33],[72,36,45,34,"_key2"],[72,41,45,39],[72,42,45,40],[73,4,46,2],[74,4,47,2],[74,8,47,8,"array"],[74,13,47,13],[74,16,47,16,"arr"],[74,19,47,19],[74,20,47,20,"concat"],[74,26,47,26],[74,27,47,27,"values"],[74,33,47,33],[74,34,47,34],[75,4,48,2],[75,11,48,9,"containsDates"],[75,24,48,22],[75,25,48,23,"array"],[75,30,48,28],[75,31,48,29],[75,34,48,32],[75,38,48,36,"Date"],[75,42,48,40],[75,43,48,41,"Math"],[75,47,48,45],[75,48,48,46,"min"],[75,51,48,49],[75,52,48,49,"apply"],[75,57,48,49],[75,58,48,41,"Math"],[75,62,48,45],[75,68,48,45,"_toConsumableArray2"],[75,87,48,45],[75,88,48,45,"default"],[75,95,48,45],[75,97,48,53,"array"],[75,102,48,58],[75,104,48,59],[75,105,48,60],[75,106,48,61],[76,4,48,61],[76,6,49,4,"Math"],[76,10,49,8],[76,11,49,9,"min"],[76,14,49,12],[76,15,49,12,"apply"],[76,20,49,12],[76,21,49,4,"Math"],[76,25,49,8],[76,31,49,8,"_toConsumableArray2"],[76,50,49,8],[76,51,49,8,"default"],[76,58,49,8],[76,60,49,16,"array"],[76,65,49,21],[76,67,49,22],[77,2,50,0],[78,0,50,1],[78,3]],"functionMap":{"names":["isNonEmptyArray","<global>","containsStrings","some$argument_0","containsDates","containsNumbers","containsOnlyStrings","every$argument_0","difference","a.filter$argument_0","isArrayOfArrays","removeUndefined","arr.filter$argument_0","getMaxValue","getMinValue"],"mappings":"AAA;CCE;OCC;sDCC,kCD;CDC;OGC;sDDC,8BC;CHC;OIC;sDFC,kCE;CJC;OKC;yDCC,kCD;CLC;OOQ;oBCE,2BD;CPG;OSC;CTE;OUC;oBCC,sBD;CVC;OYC;CZO;OaC"}},"type":"js/module"}]}