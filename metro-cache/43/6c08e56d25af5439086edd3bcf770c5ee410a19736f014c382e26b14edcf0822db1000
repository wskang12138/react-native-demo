{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = newInterval;\n  var t0 = new Date(),\n    t1 = new Date();\n  function newInterval(floori, offseti, count, field) {\n    function interval(date) {\n      return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n    }\n    interval.floor = function (date) {\n      return floori(date = new Date(+date)), date;\n    };\n    interval.ceil = function (date) {\n      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n    };\n    interval.round = function (date) {\n      var d0 = interval(date),\n        d1 = interval.ceil(date);\n      return date - d0 < d1 - date ? d0 : d1;\n    };\n    interval.offset = function (date, step) {\n      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n    };\n    interval.range = function (start, stop, step) {\n      var range = [],\n        previous;\n      start = interval.ceil(start);\n      step = step == null ? 1 : Math.floor(step);\n      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n      do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);\n      return range;\n    };\n    interval.filter = function (test) {\n      return newInterval(function (date) {\n        if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n      }, function (date, step) {\n        if (date >= date) {\n          if (step < 0) while (++step <= 0) {\n            while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n          } else while (--step >= 0) {\n            while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n          }\n        }\n      });\n    };\n    if (count) {\n      interval.count = function (start, end) {\n        t0.setTime(+start), t1.setTime(+end);\n        floori(t0), floori(t1);\n        return Math.floor(count(t0, t1));\n      };\n      interval.every = function (step) {\n        step = Math.floor(step);\n        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n          return field(d) % step === 0;\n        } : function (d) {\n          return interval.count(0, d) % step === 0;\n        });\n      };\n    }\n    return interval;\n  }\n});","lineCount":67,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,15],[7,20,6,18,"newInterval"],[7,31,6,29],[8,2,7,0],[8,6,7,4,"t0"],[8,8,7,6],[8,11,7,9],[8,15,7,13,"Date"],[8,19,7,17],[8,20,7,18],[8,21,7,19],[9,4,8,2,"t1"],[9,6,8,4],[9,9,8,7],[9,13,8,11,"Date"],[9,17,8,15],[9,18,8,16],[9,19,8,17],[10,2,9,0],[10,11,9,9,"newInterval"],[10,22,9,20,"newInterval"],[10,23,9,21,"floori"],[10,29,9,27],[10,31,9,29,"offseti"],[10,38,9,36],[10,40,9,38,"count"],[10,45,9,43],[10,47,9,45,"field"],[10,52,9,50],[10,54,9,52],[11,4,10,2],[11,13,10,11,"interval"],[11,21,10,19,"interval"],[11,22,10,20,"date"],[11,26,10,24],[11,28,10,26],[12,6,11,4],[12,13,11,11,"floori"],[12,19,11,17],[12,20,11,18,"date"],[12,24,11,22],[12,27,11,25,"arguments"],[12,36,11,34],[12,37,11,35,"length"],[12,43,11,41],[12,48,11,46],[12,49,11,47],[12,52,11,50],[12,56,11,54,"Date"],[12,60,11,58],[12,61,11,59],[12,62,11,60],[12,65,11,63],[12,69,11,67,"Date"],[12,73,11,71],[12,74,11,72],[12,75,11,73,"date"],[12,79,11,77],[12,80,11,78],[12,81,11,79],[12,83,11,81,"date"],[12,87,11,85],[13,4,12,2],[14,4,13,2,"interval"],[14,12,13,10],[14,13,13,11,"floor"],[14,18,13,16],[14,21,13,19],[14,31,13,29,"date"],[14,35,13,33],[14,37,13,35],[15,6,14,4],[15,13,14,11,"floori"],[15,19,14,17],[15,20,14,18,"date"],[15,24,14,22],[15,27,14,25],[15,31,14,29,"Date"],[15,35,14,33],[15,36,14,34],[15,37,14,35,"date"],[15,41,14,39],[15,42,14,40],[15,43,14,41],[15,45,14,43,"date"],[15,49,14,47],[16,4,15,2],[16,5,15,3],[17,4,16,2,"interval"],[17,12,16,10],[17,13,16,11,"ceil"],[17,17,16,15],[17,20,16,18],[17,30,16,28,"date"],[17,34,16,32],[17,36,16,34],[18,6,17,4],[18,13,17,11,"floori"],[18,19,17,17],[18,20,17,18,"date"],[18,24,17,22],[18,27,17,25],[18,31,17,29,"Date"],[18,35,17,33],[18,36,17,34,"date"],[18,40,17,38],[18,43,17,41],[18,44,17,42],[18,45,17,43],[18,46,17,44],[18,48,17,46,"offseti"],[18,55,17,53],[18,56,17,54,"date"],[18,60,17,58],[18,62,17,60],[18,63,17,61],[18,64,17,62],[18,66,17,64,"floori"],[18,72,17,70],[18,73,17,71,"date"],[18,77,17,75],[18,78,17,76],[18,80,17,78,"date"],[18,84,17,82],[19,4,18,2],[19,5,18,3],[20,4,19,2,"interval"],[20,12,19,10],[20,13,19,11,"round"],[20,18,19,16],[20,21,19,19],[20,31,19,29,"date"],[20,35,19,33],[20,37,19,35],[21,6,20,4],[21,10,20,8,"d0"],[21,12,20,10],[21,15,20,13,"interval"],[21,23,20,21],[21,24,20,22,"date"],[21,28,20,26],[21,29,20,27],[22,8,21,6,"d1"],[22,10,21,8],[22,13,21,11,"interval"],[22,21,21,19],[22,22,21,20,"ceil"],[22,26,21,24],[22,27,21,25,"date"],[22,31,21,29],[22,32,21,30],[23,6,22,4],[23,13,22,11,"date"],[23,17,22,15],[23,20,22,18,"d0"],[23,22,22,20],[23,25,22,23,"d1"],[23,27,22,25],[23,30,22,28,"date"],[23,34,22,32],[23,37,22,35,"d0"],[23,39,22,37],[23,42,22,40,"d1"],[23,44,22,42],[24,4,23,2],[24,5,23,3],[25,4,24,2,"interval"],[25,12,24,10],[25,13,24,11,"offset"],[25,19,24,17],[25,22,24,20],[25,32,24,30,"date"],[25,36,24,34],[25,38,24,36,"step"],[25,42,24,40],[25,44,24,42],[26,6,25,4],[26,13,25,11,"offseti"],[26,20,25,18],[26,21,25,19,"date"],[26,25,25,23],[26,28,25,26],[26,32,25,30,"Date"],[26,36,25,34],[26,37,25,35],[26,38,25,36,"date"],[26,42,25,40],[26,43,25,41],[26,45,25,43,"step"],[26,49,25,47],[26,53,25,51],[26,57,25,55],[26,60,25,58],[26,61,25,59],[26,64,25,62,"Math"],[26,68,25,66],[26,69,25,67,"floor"],[26,74,25,72],[26,75,25,73,"step"],[26,79,25,77],[26,80,25,78],[26,81,25,79],[26,83,25,81,"date"],[26,87,25,85],[27,4,26,2],[27,5,26,3],[28,4,27,2,"interval"],[28,12,27,10],[28,13,27,11,"range"],[28,18,27,16],[28,21,27,19],[28,31,27,29,"start"],[28,36,27,34],[28,38,27,36,"stop"],[28,42,27,40],[28,44,27,42,"step"],[28,48,27,46],[28,50,27,48],[29,6,28,4],[29,10,28,8,"range"],[29,15,28,13],[29,18,28,16],[29,20,28,18],[30,8,29,6,"previous"],[30,16,29,14],[31,6,30,4,"start"],[31,11,30,9],[31,14,30,12,"interval"],[31,22,30,20],[31,23,30,21,"ceil"],[31,27,30,25],[31,28,30,26,"start"],[31,33,30,31],[31,34,30,32],[32,6,31,4,"step"],[32,10,31,8],[32,13,31,11,"step"],[32,17,31,15],[32,21,31,19],[32,25,31,23],[32,28,31,26],[32,29,31,27],[32,32,31,30,"Math"],[32,36,31,34],[32,37,31,35,"floor"],[32,42,31,40],[32,43,31,41,"step"],[32,47,31,45],[32,48,31,46],[33,6,32,4],[33,10,32,8],[33,12,32,10,"start"],[33,17,32,15],[33,20,32,18,"stop"],[33,24,32,22],[33,25,32,23],[33,29,32,27],[33,31,32,29,"step"],[33,35,32,33],[33,38,32,36],[33,39,32,37],[33,40,32,38],[33,42,32,40],[33,49,32,47,"range"],[33,54,32,52],[33,55,32,53],[33,56,32,54],[34,6,33,4],[34,9,33,7,"range"],[34,14,33,12],[34,15,33,13,"push"],[34,19,33,17],[34,20,33,18,"previous"],[34,28,33,26],[34,31,33,29],[34,35,33,33,"Date"],[34,39,33,37],[34,40,33,38],[34,41,33,39,"start"],[34,46,33,44],[34,47,33,45],[34,48,33,46],[34,50,33,48,"offseti"],[34,57,33,55],[34,58,33,56,"start"],[34,63,33,61],[34,65,33,63,"step"],[34,69,33,67],[34,70,33,68],[34,72,33,70,"floori"],[34,78,33,76],[34,79,33,77,"start"],[34,84,33,82],[34,85,33,83],[34,86,33,84],[34,94,33,92,"previous"],[34,102,33,100],[34,105,33,103,"start"],[34,110,33,108],[34,114,33,112,"start"],[34,119,33,117],[34,122,33,120,"stop"],[34,126,33,124],[35,6,34,4],[35,13,34,11,"range"],[35,18,34,16],[36,4,35,2],[36,5,35,3],[37,4,36,2,"interval"],[37,12,36,10],[37,13,36,11,"filter"],[37,19,36,17],[37,22,36,20],[37,32,36,30,"test"],[37,36,36,34],[37,38,36,36],[38,6,37,4],[38,13,37,11,"newInterval"],[38,24,37,22],[38,25,37,23],[38,35,37,33,"date"],[38,39,37,37],[38,41,37,39],[39,8,38,6],[39,12,38,10,"date"],[39,16,38,14],[39,20,38,18,"date"],[39,24,38,22],[39,26,38,24],[39,33,38,31,"floori"],[39,39,38,37],[39,40,38,38,"date"],[39,44,38,42],[39,45,38,43],[39,47,38,45],[39,48,38,46,"test"],[39,52,38,50],[39,53,38,51,"date"],[39,57,38,55],[39,58,38,56],[39,60,38,58,"date"],[39,64,38,62],[39,65,38,63,"setTime"],[39,72,38,70],[39,73,38,71,"date"],[39,77,38,75],[39,80,38,78],[39,81,38,79],[39,82,38,80],[40,6,39,4],[40,7,39,5],[40,9,39,7],[40,19,39,17,"date"],[40,23,39,21],[40,25,39,23,"step"],[40,29,39,27],[40,31,39,29],[41,8,40,6],[41,12,40,10,"date"],[41,16,40,14],[41,20,40,18,"date"],[41,24,40,22],[41,26,40,24],[42,10,41,8],[42,14,41,12,"step"],[42,18,41,16],[42,21,41,19],[42,22,41,20],[42,24,41,22],[42,31,41,29],[42,33,41,31,"step"],[42,37,41,35],[42,41,41,39],[42,42,41,40],[42,44,41,42],[43,12,42,10],[43,19,42,17,"offseti"],[43,26,42,24],[43,27,42,25,"date"],[43,31,42,29],[43,33,42,31],[43,34,42,32],[43,35,42,33],[43,36,42,34],[43,38,42,36],[43,39,42,37,"test"],[43,43,42,41],[43,44,42,42,"date"],[43,48,42,46],[43,49,42,47],[43,51,42,49],[43,52,42,50],[43,53,42,51],[43,54,42,52],[44,10,43,8],[44,11,43,9],[44,17,43,15],[44,24,43,22],[44,26,43,24,"step"],[44,30,43,28],[44,34,43,32],[44,35,43,33],[44,37,43,35],[45,12,44,10],[45,19,44,17,"offseti"],[45,26,44,24],[45,27,44,25,"date"],[45,31,44,29],[45,33,44,31],[45,34,44,32],[45,35,44,33],[45,36,44,34],[45,38,44,36],[45,39,44,37,"test"],[45,43,44,41],[45,44,44,42,"date"],[45,48,44,46],[45,49,44,47],[45,51,44,49],[45,52,44,50],[45,53,44,51],[45,54,44,52],[46,10,45,8],[47,8,46,6],[48,6,47,4],[48,7,47,5],[48,8,47,6],[49,4,48,2],[49,5,48,3],[50,4,49,2],[50,8,49,6,"count"],[50,13,49,11],[50,15,49,13],[51,6,50,4,"interval"],[51,14,50,12],[51,15,50,13,"count"],[51,20,50,18],[51,23,50,21],[51,33,50,31,"start"],[51,38,50,36],[51,40,50,38,"end"],[51,43,50,41],[51,45,50,43],[52,8,51,6,"t0"],[52,10,51,8],[52,11,51,9,"setTime"],[52,18,51,16],[52,19,51,17],[52,20,51,18,"start"],[52,25,51,23],[52,26,51,24],[52,28,51,26,"t1"],[52,30,51,28],[52,31,51,29,"setTime"],[52,38,51,36],[52,39,51,37],[52,40,51,38,"end"],[52,43,51,41],[52,44,51,42],[53,8,52,6,"floori"],[53,14,52,12],[53,15,52,13,"t0"],[53,17,52,15],[53,18,52,16],[53,20,52,18,"floori"],[53,26,52,24],[53,27,52,25,"t1"],[53,29,52,27],[53,30,52,28],[54,8,53,6],[54,15,53,13,"Math"],[54,19,53,17],[54,20,53,18,"floor"],[54,25,53,23],[54,26,53,24,"count"],[54,31,53,29],[54,32,53,30,"t0"],[54,34,53,32],[54,36,53,34,"t1"],[54,38,53,36],[54,39,53,37],[54,40,53,38],[55,6,54,4],[55,7,54,5],[56,6,55,4,"interval"],[56,14,55,12],[56,15,55,13,"every"],[56,20,55,18],[56,23,55,21],[56,33,55,31,"step"],[56,37,55,35],[56,39,55,37],[57,8,56,6,"step"],[57,12,56,10],[57,15,56,13,"Math"],[57,19,56,17],[57,20,56,18,"floor"],[57,25,56,23],[57,26,56,24,"step"],[57,30,56,28],[57,31,56,29],[58,8,57,6],[58,15,57,13],[58,16,57,14,"isFinite"],[58,24,57,22],[58,25,57,23,"step"],[58,29,57,27],[58,30,57,28],[58,34,57,32],[58,36,57,34,"step"],[58,40,57,38],[58,43,57,41],[58,44,57,42],[58,45,57,43],[58,48,57,46],[58,52,57,50],[58,55,57,53],[58,57,57,55,"step"],[58,61,57,59],[58,64,57,62],[58,65,57,63],[58,66,57,64],[58,69,57,67,"interval"],[58,77,57,75],[58,80,57,78,"interval"],[58,88,57,86],[58,89,57,87,"filter"],[58,95,57,93],[58,96,57,94,"field"],[58,101,57,99],[58,104,57,102],[58,114,57,112,"d"],[58,115,57,113],[58,117,57,115],[59,10,58,8],[59,17,58,15,"field"],[59,22,58,20],[59,23,58,21,"d"],[59,24,58,22],[59,25,58,23],[59,28,58,26,"step"],[59,32,58,30],[59,37,58,35],[59,38,58,36],[60,8,59,6],[60,9,59,7],[60,12,59,10],[60,22,59,20,"d"],[60,23,59,21],[60,25,59,23],[61,10,60,8],[61,17,60,15,"interval"],[61,25,60,23],[61,26,60,24,"count"],[61,31,60,29],[61,32,60,30],[61,33,60,31],[61,35,60,33,"d"],[61,36,60,34],[61,37,60,35],[61,40,60,38,"step"],[61,44,60,42],[61,49,60,47],[61,50,60,48],[62,8,61,6],[62,9,61,7],[62,10,61,8],[63,6,62,4],[63,7,62,5],[64,4,63,2],[65,4,64,2],[65,11,64,9,"interval"],[65,19,64,17],[66,2,65,0],[67,0,65,1],[67,3]],"functionMap":{"names":["<global>","newInterval","interval","floor","ceil","round","offset","range","filter","newInterval$argument_0","newInterval$argument_1","count","every","<anonymous>"],"mappings":"AAA;ACQ;ECC;GDE;mBEC;GFE;kBGC;GHE;mBIC;GJI;oBKC;GLE;mBMC;GNQ;oBOC;uBCC;KDE,EE;KFQ;GPC;qBUE;KVI;qBWC;sGCE;ODE,GC;ODE;KXC"}},"type":"js/module"}]}