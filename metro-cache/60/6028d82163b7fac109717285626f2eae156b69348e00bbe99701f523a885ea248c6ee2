{"dependencies":[{"name":"./isSymbol","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":15,"index":92},"end":{"line":3,"column":36,"index":113}}],"key":"4aENMmPx4A0YyMi79fdUpjQuSFY="}},{"name":"./isObject","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":15,"index":54},"end":{"line":2,"column":36,"index":75}},{"start":{"line":2,"column":15,"index":54},"end":{"line":2,"column":36,"index":75}}],"key":"xnw3QWPu30LK7wuRZzB/qxR31wk="}},{"name":"./_baseTrim","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":15,"index":15},"end":{"line":1,"column":37,"index":37}}],"key":"kNrGsZ8G6lEuR3HPp7llj8DSr5g="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /** Used as references for various `Number` constants. */\n  var NAN = 0 / 0;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseInt = parseInt;\n\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n    if (_$$_REQUIRE(_dependencyMap[0], \"./isSymbol\")(value)) {\n      return NAN;\n    }\n    if (_$$_REQUIRE(_dependencyMap[1], \"./isObject\")(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = _$$_REQUIRE(_dependencyMap[1], \"./isObject\")(other) ? other + '' : other;\n    }\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n    value = _$$_REQUIRE(_dependencyMap[2], \"./_baseTrim\")(value);\n    var isBinary = reIsBinary.test(value);\n    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n  }\n  module.exports = toNumber;\n});","lineCount":59,"map":[[2,2,5,0],[3,2,6,0],[3,6,6,4,"NAN"],[3,9,6,7],[3,12,6,10],[3,13,6,11],[3,16,6,14],[3,17,6,15],[5,2,8,0],[6,2,9,0],[6,6,9,4,"reIsBadHex"],[6,16,9,14],[6,19,9,17],[6,39,9,37],[8,2,11,0],[9,2,12,0],[9,6,12,4,"reIsBinary"],[9,16,12,14],[9,19,12,17],[9,31,12,29],[11,2,14,0],[12,2,15,0],[12,6,15,4,"reIsOctal"],[12,15,15,13],[12,18,15,16],[12,31,15,29],[14,2,17,0],[15,2,18,0],[15,6,18,4,"freeParseInt"],[15,18,18,16],[15,21,18,19,"parseInt"],[15,29,18,27],[17,2,20,0],[18,0,21,0],[19,0,22,0],[20,0,23,0],[21,0,24,0],[22,0,25,0],[23,0,26,0],[24,0,27,0],[25,0,28,0],[26,0,29,0],[27,0,30,0],[28,0,31,0],[29,0,32,0],[30,0,33,0],[31,0,34,0],[32,0,35,0],[33,0,36,0],[34,0,37,0],[35,0,38,0],[36,0,39,0],[37,0,40,0],[38,0,41,0],[39,0,42,0],[40,2,43,0],[40,11,43,9,"toNumber"],[40,19,43,17,"toNumber"],[40,20,43,18,"value"],[40,25,43,23],[40,27,43,25],[41,4,44,2],[41,8,44,6],[41,15,44,13,"value"],[41,20,44,18],[41,24,44,22],[41,32,44,30],[41,34,44,32],[42,6,45,4],[42,13,45,11,"value"],[42,18,45,16],[43,4,46,2],[44,4,47,2],[44,8,47,6,"_$$_REQUIRE"],[44,19,47,6],[44,20,47,6,"_dependencyMap"],[44,34,47,6],[44,53,47,15,"value"],[44,58,47,20],[44,59,47,21],[44,61,47,23],[45,6,48,4],[45,13,48,11,"NAN"],[45,16,48,14],[46,4,49,2],[47,4,50,2],[47,8,50,6,"_$$_REQUIRE"],[47,19,50,6],[47,20,50,6,"_dependencyMap"],[47,34,50,6],[47,53,50,15,"value"],[47,58,50,20],[47,59,50,21],[47,61,50,23],[48,6,51,4],[48,10,51,8,"other"],[48,15,51,13],[48,18,51,16],[48,25,51,23,"value"],[48,30,51,28],[48,31,51,29,"valueOf"],[48,38,51,36],[48,42,51,40],[48,52,51,50],[48,55,51,53,"value"],[48,60,51,58],[48,61,51,59,"valueOf"],[48,68,51,66],[48,69,51,67],[48,70,51,68],[48,73,51,71,"value"],[48,78,51,76],[49,6,52,4,"value"],[49,11,52,9],[49,14,52,12,"_$$_REQUIRE"],[49,25,52,12],[49,26,52,12,"_dependencyMap"],[49,40,52,12],[49,59,52,21,"other"],[49,64,52,26],[49,65,52,27],[49,68,52,31,"other"],[49,73,52,36],[49,76,52,39],[49,78,52,41],[49,81,52,45,"other"],[49,86,52,50],[50,4,53,2],[51,4,54,2],[51,8,54,6],[51,15,54,13,"value"],[51,20,54,18],[51,24,54,22],[51,32,54,30],[51,34,54,32],[52,6,55,4],[52,13,55,11,"value"],[52,18,55,16],[52,23,55,21],[52,24,55,22],[52,27,55,25,"value"],[52,32,55,30],[52,35,55,33],[52,36,55,34,"value"],[52,41,55,39],[53,4,56,2],[54,4,57,2,"value"],[54,9,57,7],[54,12,57,10,"_$$_REQUIRE"],[54,23,57,10],[54,24,57,10,"_dependencyMap"],[54,38,57,10],[54,58,57,19,"value"],[54,63,57,24],[54,64,57,25],[55,4,58,2],[55,8,58,6,"isBinary"],[55,16,58,14],[55,19,58,17,"reIsBinary"],[55,29,58,27],[55,30,58,28,"test"],[55,34,58,32],[55,35,58,33,"value"],[55,40,58,38],[55,41,58,39],[56,4,59,2],[56,11,59,10,"isBinary"],[56,19,59,18],[56,23,59,22,"reIsOctal"],[56,32,59,31],[56,33,59,32,"test"],[56,37,59,36],[56,38,59,37,"value"],[56,43,59,42],[56,44,59,43],[56,47,60,6,"freeParseInt"],[56,59,60,18],[56,60,60,19,"value"],[56,65,60,24],[56,66,60,25,"slice"],[56,71,60,30],[56,72,60,31],[56,73,60,32],[56,74,60,33],[56,76,60,35,"isBinary"],[56,84,60,43],[56,87,60,46],[56,88,60,47],[56,91,60,50],[56,92,60,51],[56,93,60,52],[56,96,61,7,"reIsBadHex"],[56,106,61,17],[56,107,61,18,"test"],[56,111,61,22],[56,112,61,23,"value"],[56,117,61,28],[56,118,61,29],[56,121,61,32,"NAN"],[56,124,61,35],[56,127,61,38],[56,128,61,39,"value"],[56,133,61,45],[57,2,62,0],[58,2,64,0,"module"],[58,8,64,6],[58,9,64,7,"exports"],[58,16,64,14],[58,19,64,17,"toNumber"],[58,27,64,25],[59,0,64,26],[59,3]],"functionMap":{"names":["<global>","toNumber"],"mappings":"AAA;AC0C;CDmB"}},"type":"js/module"}]}