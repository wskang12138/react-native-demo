{"dependencies":[{"name":"./isObjectLike","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":19,"index":72},"end":{"line":2,"column":44,"index":97}},{"start":{"line":2,"column":19,"index":72},"end":{"line":2,"column":44,"index":97}}],"key":"bDfKRn5dNU3lMH8PeRyCGqM7guo="}},{"name":"./_baseIsEqualDeep","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":22,"index":22},"end":{"line":1,"column":51,"index":51}}],"key":"DcgGM/H6fGxl1zMlcHEpdYC6emg="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * The base implementation of `_.isEqual` which supports partial comparisons\n   * and tracks traversed objects.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Unordered comparison\n   *  2 - Partial comparison\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   */\n  function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n      return true;\n    }\n    if (value == null || other == null || !_$$_REQUIRE(_dependencyMap[0], \"./isObjectLike\")(value) && !_$$_REQUIRE(_dependencyMap[0], \"./isObjectLike\")(other)) {\n      return value !== value && other !== other;\n    }\n    return _$$_REQUIRE(_dependencyMap[1], \"./_baseIsEqualDeep\")(value, other, bitmask, customizer, baseIsEqual, stack);\n  }\n  module.exports = baseIsEqual;\n});","lineCount":26,"map":[[2,2,4,0],[3,0,5,0],[4,0,6,0],[5,0,7,0],[6,0,8,0],[7,0,9,0],[8,0,10,0],[9,0,11,0],[10,0,12,0],[11,0,13,0],[12,0,14,0],[13,0,15,0],[14,0,16,0],[15,0,17,0],[16,2,18,0],[16,11,18,9,"baseIsEqual"],[16,22,18,20,"baseIsEqual"],[16,23,18,21,"value"],[16,28,18,26],[16,30,18,28,"other"],[16,35,18,33],[16,37,18,35,"bitmask"],[16,44,18,42],[16,46,18,44,"customizer"],[16,56,18,54],[16,58,18,56,"stack"],[16,63,18,61],[16,65,18,63],[17,4,19,2],[17,8,19,6,"value"],[17,13,19,11],[17,18,19,16,"other"],[17,23,19,21],[17,25,19,23],[18,6,20,4],[18,13,20,11],[18,17,20,15],[19,4,21,2],[20,4,22,2],[20,8,22,6,"value"],[20,13,22,11],[20,17,22,15],[20,21,22,19],[20,25,22,23,"other"],[20,30,22,28],[20,34,22,32],[20,38,22,36],[20,42,22,41],[20,43,22,42,"_$$_REQUIRE"],[20,54,22,42],[20,55,22,42,"_dependencyMap"],[20,69,22,42],[20,92,22,55,"value"],[20,97,22,60],[20,98,22,61],[20,102,22,65],[20,103,22,66,"_$$_REQUIRE"],[20,114,22,66],[20,115,22,66,"_dependencyMap"],[20,129,22,66],[20,152,22,79,"other"],[20,157,22,84],[20,158,22,86],[20,160,22,88],[21,6,23,4],[21,13,23,11,"value"],[21,18,23,16],[21,23,23,21,"value"],[21,28,23,26],[21,32,23,30,"other"],[21,37,23,35],[21,42,23,40,"other"],[21,47,23,45],[22,4,24,2],[23,4,25,2],[23,11,25,9,"_$$_REQUIRE"],[23,22,25,9],[23,23,25,9,"_dependencyMap"],[23,37,25,9],[23,64,25,25,"value"],[23,69,25,30],[23,71,25,32,"other"],[23,76,25,37],[23,78,25,39,"bitmask"],[23,85,25,46],[23,87,25,48,"customizer"],[23,97,25,58],[23,99,25,60,"baseIsEqual"],[23,110,25,71],[23,112,25,73,"stack"],[23,117,25,78],[23,118,25,79],[24,2,26,0],[25,2,28,0,"module"],[25,8,28,6],[25,9,28,7,"exports"],[25,16,28,14],[25,19,28,17,"baseIsEqual"],[25,30,28,28],[26,0,28,29],[26,3]],"functionMap":{"names":["<global>","baseIsEqual"],"mappings":"AAA;ACiB;CDQ"}},"type":"js/module"}]}