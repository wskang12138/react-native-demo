{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /** Error message constants. */\n  var FUNC_ERROR_TEXT = 'Expected a function';\n\n  /**\n   * Creates a function that negates the result of the predicate `func`. The\n   * `func` predicate is invoked with the `this` binding and arguments of the\n   * created function.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Function\n   * @param {Function} predicate The predicate to negate.\n   * @returns {Function} Returns the new negated function.\n   * @example\n   *\n   * function isEven(n) {\n   *   return n % 2 == 0;\n   * }\n   *\n   * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n   * // => [1, 3, 5]\n   */\n  function negate(predicate) {\n    if (typeof predicate != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n    return function () {\n      var args = arguments;\n      switch (args.length) {\n        case 0:\n          return !predicate.call(this);\n        case 1:\n          return !predicate.call(this, args[0]);\n        case 2:\n          return !predicate.call(this, args[0], args[1]);\n        case 3:\n          return !predicate.call(this, args[0], args[1], args[2]);\n      }\n      return !predicate.apply(this, args);\n    };\n  }\n  module.exports = negate;\n});","lineCount":45,"map":[[2,2,1,0],[3,2,2,0],[3,6,2,4,"FUNC_ERROR_TEXT"],[3,21,2,19],[3,24,2,22],[3,45,2,43],[5,2,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,2,24,0],[25,11,24,9,"negate"],[25,17,24,15,"negate"],[25,18,24,16,"predicate"],[25,27,24,25],[25,29,24,27],[26,4,25,2],[26,8,25,6],[26,15,25,13,"predicate"],[26,24,25,22],[26,28,25,26],[26,38,25,36],[26,40,25,38],[27,6,26,4],[27,12,26,10],[27,16,26,14,"TypeError"],[27,25,26,23],[27,26,26,24,"FUNC_ERROR_TEXT"],[27,41,26,39],[27,42,26,40],[28,4,27,2],[29,4,28,2],[29,11,28,9],[29,23,28,20],[30,6,29,4],[30,10,29,8,"args"],[30,14,29,12],[30,17,29,15,"arguments"],[30,26,29,24],[31,6,30,4],[31,14,30,12,"args"],[31,18,30,16],[31,19,30,17,"length"],[31,25,30,23],[32,8,31,6],[32,13,31,11],[32,14,31,12],[33,10,31,14],[33,17,31,21],[33,18,31,22,"predicate"],[33,27,31,31],[33,28,31,32,"call"],[33,32,31,36],[33,33,31,37],[33,37,31,41],[33,38,31,42],[34,8,32,6],[34,13,32,11],[34,14,32,12],[35,10,32,14],[35,17,32,21],[35,18,32,22,"predicate"],[35,27,32,31],[35,28,32,32,"call"],[35,32,32,36],[35,33,32,37],[35,37,32,41],[35,39,32,43,"args"],[35,43,32,47],[35,44,32,48],[35,45,32,49],[35,46,32,50],[35,47,32,51],[36,8,33,6],[36,13,33,11],[36,14,33,12],[37,10,33,14],[37,17,33,21],[37,18,33,22,"predicate"],[37,27,33,31],[37,28,33,32,"call"],[37,32,33,36],[37,33,33,37],[37,37,33,41],[37,39,33,43,"args"],[37,43,33,47],[37,44,33,48],[37,45,33,49],[37,46,33,50],[37,48,33,52,"args"],[37,52,33,56],[37,53,33,57],[37,54,33,58],[37,55,33,59],[37,56,33,60],[38,8,34,6],[38,13,34,11],[38,14,34,12],[39,10,34,14],[39,17,34,21],[39,18,34,22,"predicate"],[39,27,34,31],[39,28,34,32,"call"],[39,32,34,36],[39,33,34,37],[39,37,34,41],[39,39,34,43,"args"],[39,43,34,47],[39,44,34,48],[39,45,34,49],[39,46,34,50],[39,48,34,52,"args"],[39,52,34,56],[39,53,34,57],[39,54,34,58],[39,55,34,59],[39,57,34,61,"args"],[39,61,34,65],[39,62,34,66],[39,63,34,67],[39,64,34,68],[39,65,34,69],[40,6,35,4],[41,6,36,4],[41,13,36,11],[41,14,36,12,"predicate"],[41,23,36,21],[41,24,36,22,"apply"],[41,29,36,27],[41,30,36,28],[41,34,36,32],[41,36,36,34,"args"],[41,40,36,38],[41,41,36,39],[42,4,37,2],[42,5,37,3],[43,2,38,0],[44,2,40,0,"module"],[44,8,40,6],[44,9,40,7,"exports"],[44,16,40,14],[44,19,40,17,"negate"],[44,25,40,23],[45,0,40,24],[45,3]],"functionMap":{"names":["<global>","negate","<anonymous>"],"mappings":"AAA;ACuB;SCI;GDS;CDC"}},"type":"js/module"}]}