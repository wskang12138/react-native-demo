{"dependencies":[{"name":"./_isFlattenable","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":20,"index":61},"end":{"line":2,"column":47,"index":88}}],"key":"8J12caCd/R8CyQPYmcX38m6Umfs="}},{"name":"./_arrayPush","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":16,"index":16},"end":{"line":1,"column":39,"index":39}}],"key":"NslcGRLrjO86BKkF8yEuUofpZa8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * The base implementation of `_.flatten` with support for restricting flattening.\n   *\n   * @private\n   * @param {Array} array The array to flatten.\n   * @param {number} depth The maximum recursion depth.\n   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n   * @param {Array} [result=[]] The initial result value.\n   * @returns {Array} Returns the new flattened array.\n   */\n  function baseFlatten(array, depth, predicate, isStrict, result) {\n    var index = -1,\n      length = array.length;\n    predicate || (predicate = _$$_REQUIRE(_dependencyMap[0], \"./_isFlattenable\"));\n    result || (result = []);\n    while (++index < length) {\n      var value = array[index];\n      if (depth > 0 && predicate(value)) {\n        if (depth > 1) {\n          // Recursively flatten arrays (susceptible to call stack limits).\n          baseFlatten(value, depth - 1, predicate, isStrict, result);\n        } else {\n          _$$_REQUIRE(_dependencyMap[1], \"./_arrayPush\")(result, value);\n        }\n      } else if (!isStrict) {\n        result[result.length] = value;\n      }\n    }\n    return result;\n  }\n  module.exports = baseFlatten;\n});","lineCount":34,"map":[[2,2,4,0],[3,0,5,0],[4,0,6,0],[5,0,7,0],[6,0,8,0],[7,0,9,0],[8,0,10,0],[9,0,11,0],[10,0,12,0],[11,0,13,0],[12,0,14,0],[13,2,15,0],[13,11,15,9,"baseFlatten"],[13,22,15,20,"baseFlatten"],[13,23,15,21,"array"],[13,28,15,26],[13,30,15,28,"depth"],[13,35,15,33],[13,37,15,35,"predicate"],[13,46,15,44],[13,48,15,46,"isStrict"],[13,56,15,54],[13,58,15,56,"result"],[13,64,15,62],[13,66,15,64],[14,4,16,2],[14,8,16,6,"index"],[14,13,16,11],[14,16,16,14],[14,17,16,15],[14,18,16,16],[15,6,17,6,"length"],[15,12,17,12],[15,15,17,15,"array"],[15,20,17,20],[15,21,17,21,"length"],[15,27,17,27],[16,4,19,2,"predicate"],[16,13,19,11],[16,18,19,16,"predicate"],[16,27,19,25],[16,30,19,25,"_$$_REQUIRE"],[16,41,19,25],[16,42,19,25,"_dependencyMap"],[16,56,19,25],[16,80,19,41],[16,81,19,42],[17,4,20,2,"result"],[17,10,20,8],[17,15,20,13,"result"],[17,21,20,19],[17,24,20,22],[17,26,20,24],[17,27,20,25],[18,4,22,2],[18,11,22,9],[18,13,22,11,"index"],[18,18,22,16],[18,21,22,19,"length"],[18,27,22,25],[18,29,22,27],[19,6,23,4],[19,10,23,8,"value"],[19,15,23,13],[19,18,23,16,"array"],[19,23,23,21],[19,24,23,22,"index"],[19,29,23,27],[19,30,23,28],[20,6,24,4],[20,10,24,8,"depth"],[20,15,24,13],[20,18,24,16],[20,19,24,17],[20,23,24,21,"predicate"],[20,32,24,30],[20,33,24,31,"value"],[20,38,24,36],[20,39,24,37],[20,41,24,39],[21,8,25,6],[21,12,25,10,"depth"],[21,17,25,15],[21,20,25,18],[21,21,25,19],[21,23,25,21],[22,10,26,8],[23,10,27,8,"baseFlatten"],[23,21,27,19],[23,22,27,20,"value"],[23,27,27,25],[23,29,27,27,"depth"],[23,34,27,32],[23,37,27,35],[23,38,27,36],[23,40,27,38,"predicate"],[23,49,27,47],[23,51,27,49,"isStrict"],[23,59,27,57],[23,61,27,59,"result"],[23,67,27,65],[23,68,27,66],[24,8,28,6],[24,9,28,7],[24,15,28,13],[25,10,29,8,"_$$_REQUIRE"],[25,21,29,8],[25,22,29,8,"_dependencyMap"],[25,36,29,8],[25,57,29,18,"result"],[25,63,29,24],[25,65,29,26,"value"],[25,70,29,31],[25,71,29,32],[26,8,30,6],[27,6,31,4],[27,7,31,5],[27,13,31,11],[27,17,31,15],[27,18,31,16,"isStrict"],[27,26,31,24],[27,28,31,26],[28,8,32,6,"result"],[28,14,32,12],[28,15,32,13,"result"],[28,21,32,19],[28,22,32,20,"length"],[28,28,32,26],[28,29,32,27],[28,32,32,30,"value"],[28,37,32,35],[29,6,33,4],[30,4,34,2],[31,4,35,2],[31,11,35,9,"result"],[31,17,35,15],[32,2,36,0],[33,2,38,0,"module"],[33,8,38,6],[33,9,38,7,"exports"],[33,16,38,14],[33,19,38,17,"baseFlatten"],[33,30,38,28],[34,0,38,29],[34,3]],"functionMap":{"names":["<global>","baseFlatten"],"mappings":"AAA;ACc;CDqB"}},"type":"js/module"}]}