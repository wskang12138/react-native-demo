{"dependencies":[{"name":"../victory-theme/victory-theme","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":62,"index":62}}],"key":"4gVAJhpIKgQC+kZEQlpa/dnxgPE="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getColorScale = getColorScale;\n  exports.toTransformString = void 0;\n  /**\n   * Given an object with CSS/SVG transform definitions, return the string value\n   * for use with the `transform` CSS property or SVG attribute. Note that we\n   * can't always guarantee the order will match the author's intended order, so\n   * authors should only use the object notation if they know that their transform\n   * is commutative or that there is only one.\n   * @param {Object} obj An object of transform definitions.\n   * @returns {String} The generated transform string.\n   */\n  var _toTransformString = exports.toTransformString = function toTransformString(obj) {\n    for (var _len = arguments.length, more = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      more[_key - 1] = arguments[_key];\n    }\n    if (more.length > 0) {\n      return more.reduce(function (memo, currentObj) {\n        return [memo, _toTransformString(currentObj)].join(\" \");\n      }, _toTransformString(obj)).trim();\n    }\n    if (obj === undefined || obj === null || typeof obj === \"string\") {\n      return obj;\n    }\n    var transforms = [];\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        var value = obj[key];\n        transforms.push(`${key}(${value})`);\n      }\n    }\n    return transforms.join(\" \").trim();\n  };\n\n  /**\n   * Given the name of a color scale, getColorScale will return an array\n   * of 5 hex string values in that color scale. If no 'name' parameter\n   * is given, it will return the Victory default grayscale.\n   * @param {String} name The name of the color scale to return (optional).\n   * @param {Object} theme The theme object to retrieve the color scale from (optional).\n   * @returns {Array} An array of 5 hex string values composing a color scale.\n   */\n  function getColorScale(name, theme) {\n    var _scales$name;\n    if (theme === void 0) {\n      theme = _$$_REQUIRE(_dependencyMap[0], \"../victory-theme/victory-theme\").VictoryTheme.material;\n    }\n    var _theme = theme,\n      _theme$palette = _theme.palette;\n    _theme$palette = _theme$palette === void 0 ? {} : _theme$palette;\n    var _theme$palette$graysc = _theme$palette.grayscale,\n      grayscale = _theme$palette$graysc === void 0 ? [\"#cccccc\", \"#969696\", \"#636363\", \"#252525\"] : _theme$palette$graysc,\n      _theme$palette$qualit = _theme$palette.qualitative,\n      qualitative = _theme$palette$qualit === void 0 ? [] : _theme$palette$qualit,\n      _theme$palette$heatma = _theme$palette.heatmap,\n      heatmap = _theme$palette$heatma === void 0 ? [] : _theme$palette$heatma,\n      _theme$palette$warm = _theme$palette.warm,\n      warm = _theme$palette$warm === void 0 ? [] : _theme$palette$warm,\n      _theme$palette$cool = _theme$palette.cool,\n      cool = _theme$palette$cool === void 0 ? [] : _theme$palette$cool,\n      _theme$palette$red = _theme$palette.red,\n      red = _theme$palette$red === void 0 ? [] : _theme$palette$red,\n      _theme$palette$blue = _theme$palette.blue,\n      blue = _theme$palette$blue === void 0 ? [] : _theme$palette$blue,\n      _theme$palette$green = _theme$palette.green,\n      green = _theme$palette$green === void 0 ? [] : _theme$palette$green;\n    var scales = {\n      grayscale: grayscale,\n      qualitative: qualitative,\n      heatmap: heatmap,\n      warm: warm,\n      cool: cool,\n      red: red,\n      blue: blue,\n      green: green\n    };\n    var selectedScale = name && (_scales$name = scales[name]) != null && _scales$name.length ? scales[name] : scales.grayscale;\n    return selectedScale;\n  }\n});","lineCount":83,"map":[[7,2,3,0],[8,0,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,2,12,7],[16,6,12,13,"toTransformString"],[16,24,12,30],[16,27,12,30,"exports"],[16,34,12,30],[16,35,12,30,"toTransformString"],[16,52,12,30],[16,55,12,33],[16,64,12,13,"toTransformString"],[16,81,12,30,"toTransformString"],[16,82,12,43,"obj"],[16,85,12,46],[16,87,12,48],[17,4,13,2],[17,9,13,7],[17,13,13,11,"_len"],[17,17,13,15],[17,20,13,18,"arguments"],[17,29,13,27],[17,30,13,28,"length"],[17,36,13,34],[17,38,13,36,"more"],[17,42,13,40],[17,45,13,43],[17,49,13,47,"Array"],[17,54,13,52],[17,55,13,53,"_len"],[17,59,13,57],[17,62,13,60],[17,63,13,61],[17,66,13,64,"_len"],[17,70,13,68],[17,73,13,71],[17,74,13,72],[17,77,13,75],[17,78,13,76],[17,79,13,77],[17,81,13,79,"_key"],[17,85,13,83],[17,88,13,86],[17,89,13,87],[17,91,13,89,"_key"],[17,95,13,93],[17,98,13,96,"_len"],[17,102,13,100],[17,104,13,102,"_key"],[17,108,13,106],[17,110,13,108],[17,112,13,110],[18,6,14,4,"more"],[18,10,14,8],[18,11,14,9,"_key"],[18,15,14,13],[18,18,14,16],[18,19,14,17],[18,20,14,18],[18,23,14,21,"arguments"],[18,32,14,30],[18,33,14,31,"_key"],[18,37,14,35],[18,38,14,36],[19,4,15,2],[20,4,16,2],[20,8,16,6,"more"],[20,12,16,10],[20,13,16,11,"length"],[20,19,16,17],[20,22,16,20],[20,23,16,21],[20,25,16,23],[21,6,17,4],[21,13,17,11,"more"],[21,17,17,15],[21,18,17,16,"reduce"],[21,24,17,22],[21,25,17,23],[21,35,17,24,"memo"],[21,39,17,28],[21,41,17,30,"currentObj"],[21,51,17,40],[21,53,17,45],[22,8,18,6],[22,15,18,13],[22,16,18,14,"memo"],[22,20,18,18],[22,22,18,20,"toTransformString"],[22,40,18,37],[22,41,18,38,"currentObj"],[22,51,18,48],[22,52,18,49],[22,53,18,50],[22,54,18,51,"join"],[22,58,18,55],[22,59,18,56],[22,62,18,59],[22,63,18,60],[23,6,19,4],[23,7,19,5],[23,9,19,7,"toTransformString"],[23,27,19,24],[23,28,19,25,"obj"],[23,31,19,28],[23,32,19,29],[23,33,19,30],[23,34,19,31,"trim"],[23,38,19,35],[23,39,19,36],[23,40,19,37],[24,4,20,2],[25,4,21,2],[25,8,21,6,"obj"],[25,11,21,9],[25,16,21,14,"undefined"],[25,25,21,23],[25,29,21,27,"obj"],[25,32,21,30],[25,37,21,35],[25,41,21,39],[25,45,21,43],[25,52,21,50,"obj"],[25,55,21,53],[25,60,21,58],[25,68,21,66],[25,70,21,68],[26,6,22,4],[26,13,22,11,"obj"],[26,16,22,14],[27,4,23,2],[28,4,24,2],[28,8,24,8,"transforms"],[28,18,24,18],[28,21,24,21],[28,23,24,23],[29,4,25,2],[29,9,25,7],[29,13,25,13,"key"],[29,16,25,16],[29,20,25,20,"obj"],[29,23,25,23],[29,25,25,25],[30,6,26,4],[30,10,26,8,"obj"],[30,13,26,11],[30,14,26,12,"hasOwnProperty"],[30,28,26,26],[30,29,26,27,"key"],[30,32,26,30],[30,33,26,31],[30,35,26,33],[31,8,27,6],[31,12,27,12,"value"],[31,17,27,17],[31,20,27,20,"obj"],[31,23,27,23],[31,24,27,24,"key"],[31,27,27,27],[31,28,27,28],[32,8,28,6,"transforms"],[32,18,28,16],[32,19,28,17,"push"],[32,23,28,21],[32,24,28,22],[32,27,28,25,"key"],[32,30,28,28],[32,34,28,32,"value"],[32,39,28,37],[32,42,28,40],[32,43,28,41],[33,6,29,4],[34,4,30,2],[35,4,31,2],[35,11,31,9,"transforms"],[35,21,31,19],[35,22,31,20,"join"],[35,26,31,24],[35,27,31,25],[35,30,31,28],[35,31,31,29],[35,32,31,30,"trim"],[35,36,31,34],[35,37,31,35],[35,38,31,36],[36,2,32,0],[36,3,32,1],[38,2,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,2,42,7],[46,11,42,16,"getColorScale"],[46,24,42,29,"getColorScale"],[46,25,42,30,"name"],[46,29,42,34],[46,31,42,36,"theme"],[46,36,42,41],[46,38,42,43],[47,4,42,43],[47,8,42,43,"_scales$name"],[47,20,42,43],[48,4,43,2],[48,8,43,6,"theme"],[48,13,43,11],[48,18,43,16],[48,23,43,21],[48,24,43,22],[48,26,43,24],[49,6,44,4,"theme"],[49,11,44,9],[49,14,44,12,"VictoryTheme"],[49,44,44,12],[49,45,44,12,"VictoryTheme"],[49,91,44,24],[49,92,44,25,"material"],[49,100,44,33],[50,4,45,2],[51,4,46,2],[51,8,46,2,"_theme"],[51,14,46,2],[51,17,57,6,"theme"],[51,22,57,11],[52,6,57,11,"_theme$palette"],[52,20,57,11],[52,23,57,11,"_theme"],[52,29,57,11],[52,30,47,4,"palette"],[52,37,47,11],[53,4,46,2,"_theme$palette"],[53,18,46,2],[53,21,46,2,"_theme$palette"],[53,35,46,2],[53,49,56,8],[53,50,56,9],[53,51,56,10],[53,54,56,10,"_theme$palette"],[53,68,56,10],[54,4,46,2],[54,8,46,2,"_theme$palette$graysc"],[54,29,46,2],[54,32,46,2,"_theme$palette"],[54,46,46,2],[54,47,48,6,"grayscale"],[54,56,48,15],[55,6,48,6,"grayscale"],[55,15,48,15],[55,18,48,15,"_theme$palette$graysc"],[55,39,48,15],[55,53,48,18],[55,54,48,19],[55,63,48,28],[55,65,48,30],[55,74,48,39],[55,76,48,41],[55,85,48,50],[55,87,48,52],[55,96,48,61],[55,97,48,62],[55,100,48,62,"_theme$palette$graysc"],[55,121,48,62],[56,6,48,62,"_theme$palette$qualit"],[56,27,48,62],[56,30,48,62,"_theme$palette"],[56,44,48,62],[56,45,49,6,"qualitative"],[56,56,49,17],[57,6,49,6,"qualitative"],[57,17,49,17],[57,20,49,17,"_theme$palette$qualit"],[57,41,49,17],[57,55,49,20],[57,57,49,22],[57,60,49,22,"_theme$palette$qualit"],[57,81,49,22],[58,6,49,22,"_theme$palette$heatma"],[58,27,49,22],[58,30,49,22,"_theme$palette"],[58,44,49,22],[58,45,50,6,"heatmap"],[58,52,50,13],[59,6,50,6,"heatmap"],[59,13,50,13],[59,16,50,13,"_theme$palette$heatma"],[59,37,50,13],[59,51,50,16],[59,53,50,18],[59,56,50,18,"_theme$palette$heatma"],[59,77,50,18],[60,6,50,18,"_theme$palette$warm"],[60,25,50,18],[60,28,50,18,"_theme$palette"],[60,42,50,18],[60,43,51,6,"warm"],[60,47,51,10],[61,6,51,6,"warm"],[61,10,51,10],[61,13,51,10,"_theme$palette$warm"],[61,32,51,10],[61,46,51,13],[61,48,51,15],[61,51,51,15,"_theme$palette$warm"],[61,70,51,15],[62,6,51,15,"_theme$palette$cool"],[62,25,51,15],[62,28,51,15,"_theme$palette"],[62,42,51,15],[62,43,52,6,"cool"],[62,47,52,10],[63,6,52,6,"cool"],[63,10,52,10],[63,13,52,10,"_theme$palette$cool"],[63,32,52,10],[63,46,52,13],[63,48,52,15],[63,51,52,15,"_theme$palette$cool"],[63,70,52,15],[64,6,52,15,"_theme$palette$red"],[64,24,52,15],[64,27,52,15,"_theme$palette"],[64,41,52,15],[64,42,53,6,"red"],[64,45,53,9],[65,6,53,6,"red"],[65,9,53,9],[65,12,53,9,"_theme$palette$red"],[65,30,53,9],[65,44,53,12],[65,46,53,14],[65,49,53,14,"_theme$palette$red"],[65,67,53,14],[66,6,53,14,"_theme$palette$blue"],[66,25,53,14],[66,28,53,14,"_theme$palette"],[66,42,53,14],[66,43,54,6,"blue"],[66,47,54,10],[67,6,54,6,"blue"],[67,10,54,10],[67,13,54,10,"_theme$palette$blue"],[67,32,54,10],[67,46,54,13],[67,48,54,15],[67,51,54,15,"_theme$palette$blue"],[67,70,54,15],[68,6,54,15,"_theme$palette$green"],[68,26,54,15],[68,29,54,15,"_theme$palette"],[68,43,54,15],[68,44,55,6,"green"],[68,49,55,11],[69,6,55,6,"green"],[69,11,55,11],[69,14,55,11,"_theme$palette$green"],[69,34,55,11],[69,48,55,14],[69,50,55,16],[69,53,55,16,"_theme$palette$green"],[69,73,55,16],[70,4,58,2],[70,8,58,8,"scales"],[70,14,58,14],[70,17,58,17],[71,6,59,4,"grayscale"],[71,15,59,13],[71,17,59,4,"grayscale"],[71,26,59,13],[72,6,60,4,"qualitative"],[72,17,60,15],[72,19,60,4,"qualitative"],[72,30,60,15],[73,6,61,4,"heatmap"],[73,13,61,11],[73,15,61,4,"heatmap"],[73,22,61,11],[74,6,62,4,"warm"],[74,10,62,8],[74,12,62,4,"warm"],[74,16,62,8],[75,6,63,4,"cool"],[75,10,63,8],[75,12,63,4,"cool"],[75,16,63,8],[76,6,64,4,"red"],[76,9,64,7],[76,11,64,4,"red"],[76,14,64,7],[77,6,65,4,"blue"],[77,10,65,8],[77,12,65,4,"blue"],[77,16,65,8],[78,6,66,4,"green"],[78,11,66,9],[78,13,66,4,"green"],[79,4,67,2],[79,5,67,3],[80,4,68,2],[80,8,68,8,"selectedScale"],[80,21,68,21],[80,24,68,24,"name"],[80,28,68,28],[80,33,68,28,"_scales$name"],[80,45,68,28],[80,48,68,32,"scales"],[80,54,68,38],[80,55,68,39,"name"],[80,59,68,43],[80,60,68,44],[80,73,68,32,"_scales$name"],[80,85,68,32],[80,86,68,46,"length"],[80,92,68,52],[80,95,68,55,"scales"],[80,101,68,61],[80,102,68,62,"name"],[80,106,68,66],[80,107,68,67],[80,110,68,70,"scales"],[80,116,68,76],[80,117,68,77,"grayscale"],[80,126,68,86],[81,4,69,2],[81,11,69,9,"selectedScale"],[81,24,69,22],[82,2,70,0],[83,0,70,1],[83,3]],"functionMap":{"names":["<global>","toTransformString","more.reduce$argument_0","getColorScale"],"mappings":"AAA;iCCW;uBCK;KDE;CDa;OGU"}},"type":"js/module"}]}