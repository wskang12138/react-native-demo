{"dependencies":[{"name":"./_SetCache","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":15,"index":15},"end":{"line":1,"column":37,"index":37}}],"key":"vP9dx5lNtbRmguLw2nF9+zjhZrw="}},{"name":"./_arraySome","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":16,"index":55},"end":{"line":2,"column":39,"index":78}}],"key":"7RN4CIKlpIbSeoilHZutktcOcZI="}},{"name":"./_cacheHas","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":15,"index":95},"end":{"line":3,"column":37,"index":117}}],"key":"XTQyFQQIDhW4QPnLKOzlYiGyU+g="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for arrays with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Array} array The array to compare.\n   * @param {Array} other The other array to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `array` and `other` objects.\n   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n   */\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false;\n    }\n    // Check that cyclic values are equal.\n    var arrStacked = stack.get(array);\n    var othStacked = stack.get(other);\n    if (arrStacked && othStacked) {\n      return arrStacked == other && othStacked == array;\n    }\n    var index = -1,\n      result = true,\n      seen = bitmask & COMPARE_UNORDERED_FLAG ? new (_$$_REQUIRE(_dependencyMap[0], \"./_SetCache\"))() : undefined;\n    stack.set(array, other);\n    stack.set(other, array);\n\n    // Ignore non-index properties.\n    while (++index < arrLength) {\n      var arrValue = array[index],\n        othValue = other[index];\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n      }\n      if (compared !== undefined) {\n        if (compared) {\n          continue;\n        }\n        result = false;\n        break;\n      }\n      // Recursively compare arrays (susceptible to call stack limits).\n      if (seen) {\n        if (!_$$_REQUIRE(_dependencyMap[1], \"./_arraySome\")(other, function (othValue, othIndex) {\n          if (!_$$_REQUIRE(_dependencyMap[2], \"./_cacheHas\")(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n            return seen.push(othIndex);\n          }\n        })) {\n          result = false;\n          break;\n        }\n      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n        result = false;\n        break;\n      }\n    }\n    stack['delete'](array);\n    stack['delete'](other);\n    return result;\n  }\n  module.exports = equalArrays;\n});","lineCount":72,"map":[[2,2,5,0],[3,2,6,0],[3,6,6,4,"COMPARE_PARTIAL_FLAG"],[3,26,6,24],[3,29,6,27],[3,30,6,28],[4,4,7,4,"COMPARE_UNORDERED_FLAG"],[4,26,7,26],[4,29,7,29],[4,30,7,30],[6,2,9,0],[7,0,10,0],[8,0,11,0],[9,0,12,0],[10,0,13,0],[11,0,14,0],[12,0,15,0],[13,0,16,0],[14,0,17,0],[15,0,18,0],[16,0,19,0],[17,0,20,0],[18,0,21,0],[19,2,22,0],[19,11,22,9,"equalArrays"],[19,22,22,20,"equalArrays"],[19,23,22,21,"array"],[19,28,22,26],[19,30,22,28,"other"],[19,35,22,33],[19,37,22,35,"bitmask"],[19,44,22,42],[19,46,22,44,"customizer"],[19,56,22,54],[19,58,22,56,"equalFunc"],[19,67,22,65],[19,69,22,67,"stack"],[19,74,22,72],[19,76,22,74],[20,4,23,2],[20,8,23,6,"isPartial"],[20,17,23,15],[20,20,23,18,"bitmask"],[20,27,23,25],[20,30,23,28,"COMPARE_PARTIAL_FLAG"],[20,50,23,48],[21,6,24,6,"arrLength"],[21,15,24,15],[21,18,24,18,"array"],[21,23,24,23],[21,24,24,24,"length"],[21,30,24,30],[22,6,25,6,"othLength"],[22,15,25,15],[22,18,25,18,"other"],[22,23,25,23],[22,24,25,24,"length"],[22,30,25,30],[23,4,27,2],[23,8,27,6,"arrLength"],[23,17,27,15],[23,21,27,19,"othLength"],[23,30,27,28],[23,34,27,32],[23,36,27,34,"isPartial"],[23,45,27,43],[23,49,27,47,"othLength"],[23,58,27,56],[23,61,27,59,"arrLength"],[23,70,27,68],[23,71,27,69],[23,73,27,71],[24,6,28,4],[24,13,28,11],[24,18,28,16],[25,4,29,2],[26,4,30,2],[27,4,31,2],[27,8,31,6,"arrStacked"],[27,18,31,16],[27,21,31,19,"stack"],[27,26,31,24],[27,27,31,25,"get"],[27,30,31,28],[27,31,31,29,"array"],[27,36,31,34],[27,37,31,35],[28,4,32,2],[28,8,32,6,"othStacked"],[28,18,32,16],[28,21,32,19,"stack"],[28,26,32,24],[28,27,32,25,"get"],[28,30,32,28],[28,31,32,29,"other"],[28,36,32,34],[28,37,32,35],[29,4,33,2],[29,8,33,6,"arrStacked"],[29,18,33,16],[29,22,33,20,"othStacked"],[29,32,33,30],[29,34,33,32],[30,6,34,4],[30,13,34,11,"arrStacked"],[30,23,34,21],[30,27,34,25,"other"],[30,32,34,30],[30,36,34,34,"othStacked"],[30,46,34,44],[30,50,34,48,"array"],[30,55,34,53],[31,4,35,2],[32,4,36,2],[32,8,36,6,"index"],[32,13,36,11],[32,16,36,14],[32,17,36,15],[32,18,36,16],[33,6,37,6,"result"],[33,12,37,12],[33,15,37,15],[33,19,37,19],[34,6,38,6,"seen"],[34,10,38,10],[34,13,38,14,"bitmask"],[34,20,38,21],[34,23,38,24,"COMPARE_UNORDERED_FLAG"],[34,45,38,46],[34,48,38,50],[34,53,38,50,"_$$_REQUIRE"],[34,64,38,50],[34,65,38,50,"_dependencyMap"],[34,79,38,50],[34,100,38,61],[34,101,38,62],[34,104,38,65,"undefined"],[34,113,38,74],[35,4,40,2,"stack"],[35,9,40,7],[35,10,40,8,"set"],[35,13,40,11],[35,14,40,12,"array"],[35,19,40,17],[35,21,40,19,"other"],[35,26,40,24],[35,27,40,25],[36,4,41,2,"stack"],[36,9,41,7],[36,10,41,8,"set"],[36,13,41,11],[36,14,41,12,"other"],[36,19,41,17],[36,21,41,19,"array"],[36,26,41,24],[36,27,41,25],[38,4,43,2],[39,4,44,2],[39,11,44,9],[39,13,44,11,"index"],[39,18,44,16],[39,21,44,19,"arrLength"],[39,30,44,28],[39,32,44,30],[40,6,45,4],[40,10,45,8,"arrValue"],[40,18,45,16],[40,21,45,19,"array"],[40,26,45,24],[40,27,45,25,"index"],[40,32,45,30],[40,33,45,31],[41,8,46,8,"othValue"],[41,16,46,16],[41,19,46,19,"other"],[41,24,46,24],[41,25,46,25,"index"],[41,30,46,30],[41,31,46,31],[42,6,48,4],[42,10,48,8,"customizer"],[42,20,48,18],[42,22,48,20],[43,8,49,6],[43,12,49,10,"compared"],[43,20,49,18],[43,23,49,21,"isPartial"],[43,32,49,30],[43,35,50,10,"customizer"],[43,45,50,20],[43,46,50,21,"othValue"],[43,54,50,29],[43,56,50,31,"arrValue"],[43,64,50,39],[43,66,50,41,"index"],[43,71,50,46],[43,73,50,48,"other"],[43,78,50,53],[43,80,50,55,"array"],[43,85,50,60],[43,87,50,62,"stack"],[43,92,50,67],[43,93,50,68],[43,96,51,10,"customizer"],[43,106,51,20],[43,107,51,21,"arrValue"],[43,115,51,29],[43,117,51,31,"othValue"],[43,125,51,39],[43,127,51,41,"index"],[43,132,51,46],[43,134,51,48,"array"],[43,139,51,53],[43,141,51,55,"other"],[43,146,51,60],[43,148,51,62,"stack"],[43,153,51,67],[43,154,51,68],[44,6,52,4],[45,6,53,4],[45,10,53,8,"compared"],[45,18,53,16],[45,23,53,21,"undefined"],[45,32,53,30],[45,34,53,32],[46,8,54,6],[46,12,54,10,"compared"],[46,20,54,18],[46,22,54,20],[47,10,55,8],[48,8,56,6],[49,8,57,6,"result"],[49,14,57,12],[49,17,57,15],[49,22,57,20],[50,8,58,6],[51,6,59,4],[52,6,60,4],[53,6,61,4],[53,10,61,8,"seen"],[53,14,61,12],[53,16,61,14],[54,8,62,6],[54,12,62,10],[54,13,62,11,"_$$_REQUIRE"],[54,24,62,11],[54,25,62,11,"_dependencyMap"],[54,39,62,11],[54,60,62,21,"other"],[54,65,62,26],[54,67,62,28],[54,77,62,37,"othValue"],[54,85,62,45],[54,87,62,47,"othIndex"],[54,95,62,55],[54,97,62,57],[55,10,63,12],[55,14,63,16],[55,15,63,17,"_$$_REQUIRE"],[55,26,63,17],[55,27,63,17,"_dependencyMap"],[55,41,63,17],[55,61,63,26,"seen"],[55,65,63,30],[55,67,63,32,"othIndex"],[55,75,63,40],[55,76,63,41],[55,81,64,17,"arrValue"],[55,89,64,25],[55,94,64,30,"othValue"],[55,102,64,38],[55,106,64,42,"equalFunc"],[55,115,64,51],[55,116,64,52,"arrValue"],[55,124,64,60],[55,126,64,62,"othValue"],[55,134,64,70],[55,136,64,72,"bitmask"],[55,143,64,79],[55,145,64,81,"customizer"],[55,155,64,91],[55,157,64,93,"stack"],[55,162,64,98],[55,163,64,99],[55,164,64,100],[55,166,64,102],[56,12,65,14],[56,19,65,21,"seen"],[56,23,65,25],[56,24,65,26,"push"],[56,28,65,30],[56,29,65,31,"othIndex"],[56,37,65,39],[56,38,65,40],[57,10,66,12],[58,8,67,10],[58,9,67,11],[58,10,67,12],[58,12,67,14],[59,10,68,8,"result"],[59,16,68,14],[59,19,68,17],[59,24,68,22],[60,10,69,8],[61,8,70,6],[62,6,71,4],[62,7,71,5],[62,13,71,11],[62,17,71,15],[62,19,72,10,"arrValue"],[62,27,72,18],[62,32,72,23,"othValue"],[62,40,72,31],[62,44,73,12,"equalFunc"],[62,53,73,21],[62,54,73,22,"arrValue"],[62,62,73,30],[62,64,73,32,"othValue"],[62,72,73,40],[62,74,73,42,"bitmask"],[62,81,73,49],[62,83,73,51,"customizer"],[62,93,73,61],[62,95,73,63,"stack"],[62,100,73,68],[62,101,73,69],[62,102,74,9],[62,104,74,11],[63,8,75,6,"result"],[63,14,75,12],[63,17,75,15],[63,22,75,20],[64,8,76,6],[65,6,77,4],[66,4,78,2],[67,4,79,2,"stack"],[67,9,79,7],[67,10,79,8],[67,18,79,16],[67,19,79,17],[67,20,79,18,"array"],[67,25,79,23],[67,26,79,24],[68,4,80,2,"stack"],[68,9,80,7],[68,10,80,8],[68,18,80,16],[68,19,80,17],[68,20,80,18,"other"],[68,25,80,23],[68,26,80,24],[69,4,81,2],[69,11,81,9,"result"],[69,17,81,15],[70,2,82,0],[71,2,84,0,"module"],[71,8,84,6],[71,9,84,7,"exports"],[71,16,84,14],[71,19,84,17,"equalArrays"],[71,30,84,28],[72,0,84,29],[72,3]],"functionMap":{"names":["<global>","equalArrays","arraySome$argument_1"],"mappings":"AAA;ACqB;4BCwC;WDK;CDe"}},"type":"js/module"}]}