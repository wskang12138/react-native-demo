{"dependencies":[{"name":"../victory-theme/victory-theme","data":{"asyncType":null,"locs":[{"start":{"line":8,"column":20,"index":175},"end":{"line":8,"column":61,"index":216}}],"key":"4gVAJhpIKgQC+kZEQlpa/dnxgPE="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getColorScale = getColorScale;\n  exports.toTransformString = void 0;\n  /**\n   * Given an object with CSS/SVG transform definitions, return the string value\n   * for use with the `transform` CSS property or SVG attribute. Note that we\n   * can't always guarantee the order will match the author's intended order, so\n   * authors should only use the object notation if they know that their transform\n   * is commutative or that there is only one.\n   * @param {Object} obj An object of transform definitions.\n   * @returns {String} The generated transform string.\n   */\n  var _toTransformString = function toTransformString(obj) {\n    for (var _len = arguments.length, more = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      more[_key - 1] = arguments[_key];\n    }\n    if (more.length > 0) {\n      return more.reduce(function (memo, currentObj) {\n        return [memo, _toTransformString(currentObj)].join(\" \");\n      }, _toTransformString(obj)).trim();\n    }\n    if (obj === undefined || obj === null || typeof obj === \"string\") {\n      return obj;\n    }\n    var transforms = [];\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        var value = obj[key];\n        transforms.push(`${key}(${value})`);\n      }\n    }\n    return transforms.join(\" \").trim();\n  };\n\n  /**\n   * Given the name of a color scale, getColorScale will return an array\n   * of 5 hex string values in that color scale. If no 'name' parameter\n   * is given, it will return the Victory default grayscale.\n   * @param {String} name The name of the color scale to return (optional).\n   * @param {Object} theme The theme object to retrieve the color scale from (optional).\n   * @returns {Array} An array of 5 hex string values composing a color scale.\n   */\n  exports.toTransformString = _toTransformString;\n  function getColorScale(name, theme) {\n    var _scales$name;\n    if (theme === void 0) {\n      theme = _$$_REQUIRE(_dependencyMap[0], \"../victory-theme/victory-theme\").VictoryTheme.material;\n    }\n    var _theme = theme,\n      _theme$palette = _theme.palette;\n    _theme$palette = _theme$palette === void 0 ? {} : _theme$palette;\n    var _theme$palette$graysc = _theme$palette.grayscale,\n      grayscale = _theme$palette$graysc === void 0 ? [\"#cccccc\", \"#969696\", \"#636363\", \"#252525\"] : _theme$palette$graysc,\n      _theme$palette$qualit = _theme$palette.qualitative,\n      qualitative = _theme$palette$qualit === void 0 ? [] : _theme$palette$qualit,\n      _theme$palette$heatma = _theme$palette.heatmap,\n      heatmap = _theme$palette$heatma === void 0 ? [] : _theme$palette$heatma,\n      _theme$palette$warm = _theme$palette.warm,\n      warm = _theme$palette$warm === void 0 ? [] : _theme$palette$warm,\n      _theme$palette$cool = _theme$palette.cool,\n      cool = _theme$palette$cool === void 0 ? [] : _theme$palette$cool,\n      _theme$palette$red = _theme$palette.red,\n      red = _theme$palette$red === void 0 ? [] : _theme$palette$red,\n      _theme$palette$blue = _theme$palette.blue,\n      blue = _theme$palette$blue === void 0 ? [] : _theme$palette$blue,\n      _theme$palette$green = _theme$palette.green,\n      green = _theme$palette$green === void 0 ? [] : _theme$palette$green;\n    var scales = {\n      grayscale: grayscale,\n      qualitative: qualitative,\n      heatmap: heatmap,\n      warm: warm,\n      cool: cool,\n      red: red,\n      blue: blue,\n      green: green\n    };\n    var selectedScale = name && (_scales$name = scales[name]) != null && _scales$name.length ? scales[name] : scales.grayscale;\n    return selectedScale;\n  }\n});","lineCount":86,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"getColorScale"],[7,23,6,21],[7,26,6,24,"getColorScale"],[7,39,6,37],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"toTransformString"],[8,27,7,25],[8,30,7,28],[8,35,7,33],[8,36,7,34],[9,2,9,0],[10,0,10,0],[11,0,11,0],[12,0,12,0],[13,0,13,0],[14,0,14,0],[15,0,15,0],[16,0,16,0],[17,0,17,0],[18,2,18,0],[18,6,18,6,"toTransformString"],[18,24,18,23],[18,27,18,26],[18,36,18,6,"toTransformString"],[18,53,18,23,"toTransformString"],[18,54,18,36,"obj"],[18,57,18,39],[18,59,18,41],[19,4,19,2],[19,9,19,7],[19,13,19,11,"_len"],[19,17,19,15],[19,20,19,18,"arguments"],[19,29,19,27],[19,30,19,28,"length"],[19,36,19,34],[19,38,19,36,"more"],[19,42,19,40],[19,45,19,43],[19,49,19,47,"Array"],[19,54,19,52],[19,55,19,53,"_len"],[19,59,19,57],[19,62,19,60],[19,63,19,61],[19,66,19,64,"_len"],[19,70,19,68],[19,73,19,71],[19,74,19,72],[19,77,19,75],[19,78,19,76],[19,79,19,77],[19,81,19,79,"_key"],[19,85,19,83],[19,88,19,86],[19,89,19,87],[19,91,19,89,"_key"],[19,95,19,93],[19,98,19,96,"_len"],[19,102,19,100],[19,104,19,102,"_key"],[19,108,19,106],[19,110,19,108],[19,112,19,110],[20,6,20,4,"more"],[20,10,20,8],[20,11,20,9,"_key"],[20,15,20,13],[20,18,20,16],[20,19,20,17],[20,20,20,18],[20,23,20,21,"arguments"],[20,32,20,30],[20,33,20,31,"_key"],[20,37,20,35],[20,38,20,36],[21,4,21,2],[22,4,22,2],[22,8,22,6,"more"],[22,12,22,10],[22,13,22,11,"length"],[22,19,22,17],[22,22,22,20],[22,23,22,21],[22,25,22,23],[23,6,23,4],[23,13,23,11,"more"],[23,17,23,15],[23,18,23,16,"reduce"],[23,24,23,22],[23,25,23,23],[23,35,23,24,"memo"],[23,39,23,28],[23,41,23,30,"currentObj"],[23,51,23,40],[23,53,23,45],[24,8,24,6],[24,15,24,13],[24,16,24,14,"memo"],[24,20,24,18],[24,22,24,20,"toTransformString"],[24,40,24,37],[24,41,24,38,"currentObj"],[24,51,24,48],[24,52,24,49],[24,53,24,50],[24,54,24,51,"join"],[24,58,24,55],[24,59,24,56],[24,62,24,59],[24,63,24,60],[25,6,25,4],[25,7,25,5],[25,9,25,7,"toTransformString"],[25,27,25,24],[25,28,25,25,"obj"],[25,31,25,28],[25,32,25,29],[25,33,25,30],[25,34,25,31,"trim"],[25,38,25,35],[25,39,25,36],[25,40,25,37],[26,4,26,2],[27,4,27,2],[27,8,27,6,"obj"],[27,11,27,9],[27,16,27,14,"undefined"],[27,25,27,23],[27,29,27,27,"obj"],[27,32,27,30],[27,37,27,35],[27,41,27,39],[27,45,27,43],[27,52,27,50,"obj"],[27,55,27,53],[27,60,27,58],[27,68,27,66],[27,70,27,68],[28,6,28,4],[28,13,28,11,"obj"],[28,16,28,14],[29,4,29,2],[30,4,30,2],[30,8,30,8,"transforms"],[30,18,30,18],[30,21,30,21],[30,23,30,23],[31,4,31,2],[31,9,31,7],[31,13,31,13,"key"],[31,16,31,16],[31,20,31,20,"obj"],[31,23,31,23],[31,25,31,25],[32,6,32,4],[32,10,32,8,"obj"],[32,13,32,11],[32,14,32,12,"hasOwnProperty"],[32,28,32,26],[32,29,32,27,"key"],[32,32,32,30],[32,33,32,31],[32,35,32,33],[33,8,33,6],[33,12,33,12,"value"],[33,17,33,17],[33,20,33,20,"obj"],[33,23,33,23],[33,24,33,24,"key"],[33,27,33,27],[33,28,33,28],[34,8,34,6,"transforms"],[34,18,34,16],[34,19,34,17,"push"],[34,23,34,21],[34,24,34,22],[34,27,34,25,"key"],[34,30,34,28],[34,34,34,32,"value"],[34,39,34,37],[34,42,34,40],[34,43,34,41],[35,6,35,4],[36,4,36,2],[37,4,37,2],[37,11,37,9,"transforms"],[37,21,37,19],[37,22,37,20,"join"],[37,26,37,24],[37,27,37,25],[37,30,37,28],[37,31,37,29],[37,32,37,30,"trim"],[37,36,37,34],[37,37,37,35],[37,38,37,36],[38,2,38,0],[38,3,38,1],[40,2,40,0],[41,0,41,0],[42,0,42,0],[43,0,43,0],[44,0,44,0],[45,0,45,0],[46,0,46,0],[47,0,47,0],[48,2,48,0,"exports"],[48,9,48,7],[48,10,48,8,"toTransformString"],[48,27,48,25],[48,30,48,28,"toTransformString"],[48,48,48,45],[49,2,49,0],[49,11,49,9,"getColorScale"],[49,24,49,22,"getColorScale"],[49,25,49,23,"name"],[49,29,49,27],[49,31,49,29,"theme"],[49,36,49,34],[49,38,49,36],[50,4,49,36],[50,8,49,36,"_scales$name"],[50,20,49,36],[51,4,50,2],[51,8,50,6,"theme"],[51,13,50,11],[51,18,50,16],[51,23,50,21],[51,24,50,22],[51,26,50,24],[52,6,51,4,"theme"],[52,11,51,9],[52,14,51,12,"_$$_REQUIRE"],[52,25,51,12],[52,26,51,12,"_dependencyMap"],[52,40,51,12],[52,79,51,26,"VictoryTheme"],[52,91,51,38],[52,92,51,39,"material"],[52,100,51,47],[53,4,52,2],[54,4,53,2],[54,8,53,2,"_theme"],[54,14,53,2],[54,17,64,6,"theme"],[54,22,64,11],[55,6,64,11,"_theme$palette"],[55,20,64,11],[55,23,64,11,"_theme"],[55,29,64,11],[55,30,54,4,"palette"],[55,37,54,11],[56,4,53,2,"_theme$palette"],[56,18,53,2],[56,21,53,2,"_theme$palette"],[56,35,53,2],[56,49,63,8],[56,50,63,9],[56,51,63,10],[56,54,63,10,"_theme$palette"],[56,68,63,10],[57,4,53,2],[57,8,53,2,"_theme$palette$graysc"],[57,29,53,2],[57,32,53,2,"_theme$palette"],[57,46,53,2],[57,47,55,6,"grayscale"],[57,56,55,15],[58,6,55,6,"grayscale"],[58,15,55,15],[58,18,55,15,"_theme$palette$graysc"],[58,39,55,15],[58,53,55,18],[58,54,55,19],[58,63,55,28],[58,65,55,30],[58,74,55,39],[58,76,55,41],[58,85,55,50],[58,87,55,52],[58,96,55,61],[58,97,55,62],[58,100,55,62,"_theme$palette$graysc"],[58,121,55,62],[59,6,55,62,"_theme$palette$qualit"],[59,27,55,62],[59,30,55,62,"_theme$palette"],[59,44,55,62],[59,45,56,6,"qualitative"],[59,56,56,17],[60,6,56,6,"qualitative"],[60,17,56,17],[60,20,56,17,"_theme$palette$qualit"],[60,41,56,17],[60,55,56,20],[60,57,56,22],[60,60,56,22,"_theme$palette$qualit"],[60,81,56,22],[61,6,56,22,"_theme$palette$heatma"],[61,27,56,22],[61,30,56,22,"_theme$palette"],[61,44,56,22],[61,45,57,6,"heatmap"],[61,52,57,13],[62,6,57,6,"heatmap"],[62,13,57,13],[62,16,57,13,"_theme$palette$heatma"],[62,37,57,13],[62,51,57,16],[62,53,57,18],[62,56,57,18,"_theme$palette$heatma"],[62,77,57,18],[63,6,57,18,"_theme$palette$warm"],[63,25,57,18],[63,28,57,18,"_theme$palette"],[63,42,57,18],[63,43,58,6,"warm"],[63,47,58,10],[64,6,58,6,"warm"],[64,10,58,10],[64,13,58,10,"_theme$palette$warm"],[64,32,58,10],[64,46,58,13],[64,48,58,15],[64,51,58,15,"_theme$palette$warm"],[64,70,58,15],[65,6,58,15,"_theme$palette$cool"],[65,25,58,15],[65,28,58,15,"_theme$palette"],[65,42,58,15],[65,43,59,6,"cool"],[65,47,59,10],[66,6,59,6,"cool"],[66,10,59,10],[66,13,59,10,"_theme$palette$cool"],[66,32,59,10],[66,46,59,13],[66,48,59,15],[66,51,59,15,"_theme$palette$cool"],[66,70,59,15],[67,6,59,15,"_theme$palette$red"],[67,24,59,15],[67,27,59,15,"_theme$palette"],[67,41,59,15],[67,42,60,6,"red"],[67,45,60,9],[68,6,60,6,"red"],[68,9,60,9],[68,12,60,9,"_theme$palette$red"],[68,30,60,9],[68,44,60,12],[68,46,60,14],[68,49,60,14,"_theme$palette$red"],[68,67,60,14],[69,6,60,14,"_theme$palette$blue"],[69,25,60,14],[69,28,60,14,"_theme$palette"],[69,42,60,14],[69,43,61,6,"blue"],[69,47,61,10],[70,6,61,6,"blue"],[70,10,61,10],[70,13,61,10,"_theme$palette$blue"],[70,32,61,10],[70,46,61,13],[70,48,61,15],[70,51,61,15,"_theme$palette$blue"],[70,70,61,15],[71,6,61,15,"_theme$palette$green"],[71,26,61,15],[71,29,61,15,"_theme$palette"],[71,43,61,15],[71,44,62,6,"green"],[71,49,62,11],[72,6,62,6,"green"],[72,11,62,11],[72,14,62,11,"_theme$palette$green"],[72,34,62,11],[72,48,62,14],[72,50,62,16],[72,53,62,16,"_theme$palette$green"],[72,73,62,16],[73,4,65,2],[73,8,65,8,"scales"],[73,14,65,14],[73,17,65,17],[74,6,66,4,"grayscale"],[74,15,66,13],[74,17,66,4,"grayscale"],[74,26,66,13],[75,6,67,4,"qualitative"],[75,17,67,15],[75,19,67,4,"qualitative"],[75,30,67,15],[76,6,68,4,"heatmap"],[76,13,68,11],[76,15,68,4,"heatmap"],[76,22,68,11],[77,6,69,4,"warm"],[77,10,69,8],[77,12,69,4,"warm"],[77,16,69,8],[78,6,70,4,"cool"],[78,10,70,8],[78,12,70,4,"cool"],[78,16,70,8],[79,6,71,4,"red"],[79,9,71,7],[79,11,71,4,"red"],[79,14,71,7],[80,6,72,4,"blue"],[80,10,72,8],[80,12,72,4,"blue"],[80,16,72,8],[81,6,73,4,"green"],[81,11,73,9],[81,13,73,4,"green"],[82,4,74,2],[82,5,74,3],[83,4,75,2],[83,8,75,8,"selectedScale"],[83,21,75,21],[83,24,75,24,"name"],[83,28,75,28],[83,33,75,28,"_scales$name"],[83,45,75,28],[83,48,75,32,"scales"],[83,54,75,38],[83,55,75,39,"name"],[83,59,75,43],[83,60,75,44],[83,73,75,32,"_scales$name"],[83,85,75,32],[83,86,75,46,"length"],[83,92,75,52],[83,95,75,55,"scales"],[83,101,75,61],[83,102,75,62,"name"],[83,106,75,66],[83,107,75,67],[83,110,75,70,"scales"],[83,116,75,76],[83,117,75,77,"grayscale"],[83,126,75,86],[84,4,76,2],[84,11,76,9,"selectedScale"],[84,24,76,22],[85,2,77,0],[86,0,77,1],[86,3]],"functionMap":{"names":["<global>","toTransformString","more.reduce$argument_0","getColorScale"],"mappings":"AAA;0BCiB;uBCK;KDE;CDa;AGW"}},"type":"js/module"}]}